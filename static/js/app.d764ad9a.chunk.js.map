{"version":3,"sources":["src/types/app-state/ActionTypesEnum.ts","src/app-state/initialState.ts","src/app-state/AppContext.ts","src/components/sign-up/styles.ts","src/utils/common-constants/errorMessages.ts","src/components/sign-up/parseSignUpResponse.ts","src/components/sign-up/useHandleSignUp.ts","src/theme/theme.ts","src/components/common-components/notification/styles.ts","src/components/common-components/notification/Notification.tsx","src/components/common-components/move-to-page/styles.ts","src/components/common-components/move-to-page/MoveToPage.tsx","src/components/common-components/form-text-input/styles.ts","src/components/add/validations.ts","src/components/common-components/form-text-input/formTextInputLabels.ts","src/components/common-components/form-text-input/FormTextInput.tsx","src/components/common-components/wait-spinner/styles.ts","src/components/common-components/wait-spinner/WaitSpinner.tsx","src/components/sign-up/SignUpForm.tsx","src/components/sign-up/signUpValidationSchema.ts","src/components/header/styles.ts","src/components/header/HeaderLogo.tsx","src/components/sign-up/SignUp.tsx","src/components/sign-up/queries.ts","src/components/login/styles.ts","src/components/login/parseLoginResponse.ts","src/components/login/parseFacebookLoginResponse.ts","src/components/login/useHandleLogin.ts","src/components/login/LoginWithFacebook.tsx","src/components/login/LoginForm.tsx","src/components/login/loginValidationSchema.ts","src/components/login/Login.tsx","src/components/login/queries.ts","src/components/login/SignUpLogin.tsx","src/components/camera/styles.ts","src/components/camera/ExpoCameraButton.tsx","src/components/camera/ExpoCamera.tsx","src/components/camera/PhotoPreviewView.tsx","src/components/camera/useUploadPhoto.ts","src/types/item/PriceGroupEnum.ts","src/apollo/cache.ts","src/components/camera/ImagingScreen.tsx","src/components/home/styles.ts","src/components/home/queries.ts","src/components/home/DeleteView.tsx","src/components/home/MyItemButton.tsx","src/components/home/getPanResponder.ts","src/components/home/getMatchedData.ts","src/components/home/Home.tsx","src/components/carousel/carouselConstants.ts","src/components/browse/styles.ts","src/components/browse/PickPriceGroupsButtons.tsx","src/components/browse/BrowseSearchTerms.tsx","src/components/browse/queries.ts","src/components/carousel/cards/performSetCardOrigoValues.ts","src/components/carousel/cards/returnCardsToStartPosition.ts","src/components/carousel/cards/swipeCardOut.ts","src/components/carousel/cards/styles.ts","src/components/carousel/cards/CardContent.tsx","src/components/carousel/cards/getMatchData.ts","src/components/carousel/cards/CarouselMiddleCard.tsx","src/components/carousel/cards/getPanResponder.ts","src/components/carousel/styles.ts","src/components/carousel/cards/CarouselSideCard.tsx","src/components/carousel/Carousel.tsx","src/components/browse/Browse.tsx","src/components/settings/styles.ts","src/components/settings/queries.ts","src/components/settings/parseRemoveAccountServerResponse.ts","src/components/settings/RemoveAccount.tsx","src/components/settings/useRemoveAccount.ts","src/components/logout/styles.ts","src/components/logout/Logout.tsx","src/components/settings/Settings.tsx","src/components/add/styles.ts","src/components/add/ItemImage.tsx","src/components/add/TogglePriceGroupButtons.tsx","src/components/add/queries.ts","src/components/add/addItemOutcomeNotifications.ts","src/components/add/useAddItem.ts","src/components/add/updateCacheAfterAddedItem.ts","src/components/add/Add.tsx","src/types/routes/RoutesEnum.ts","src/components/match/styles.ts","src/components/match/queries.ts","src/components/match/useHandleMatch.ts","src/components/match/RemoveMatch.tsx","src/components/match/MatchedItemsImages.tsx","src/components/match/ChatPost.tsx","src/components/match/getDisplayDateTime.ts","src/components/match/ChatPostList.tsx","src/components/match/NewChatPost.tsx","src/components/match/useHandleChat.ts","src/components/match/ManageMatch.tsx","src/components/match/ManageAction.tsx","src/components/common-components/handle-matches/styles.ts","src/components/common-components/handle-matches/ItemImageButtonsRow.tsx","src/components/match/MatchesPage.tsx","src/components/match/HandleMatch.tsx","src/components/match/Match.tsx","src/utils/common-functions/assertNever.ts","src/components/main-app/ScreensWithVisibleTabBar.tsx","src/components/main-app/getTabBarIcon.tsx","src/components/main-app/MainApp.tsx","src/app-state/reducer.ts","src/app-state/AppContextWithState.tsx","App.tsx","src/assets/LOGO.png"],"names":["ActionTypesEnum","initialState","loggedInUser","undefined","AppContext","createContext","state","dispatch","styles","StyleSheet","create","title","marginTop","fontSize","fontWeight","textAlign","iconButtonView","justifyContent","loginButtonView","marginBottom","formContainer","flexDirection","alignItems","waitSpinnerContainer","height","width","SIGN_UP_NOTIFICATION","errorTitle","errorGeneralContent","errorDuplicateUsernameContent","errorDuplicateEmailContent","REMOVE_ACCOUNT_NOTIFICATION","ADD_ITEM_NOTIFICATION","parseSignUpResponse","data","Error","signUpPerson","success","errorMessage","loggedInUserData","id","parseText","loginType","name","username","jwtToken","message","text","target","isString","String","CONFIGURATIONS","headers","theme","primary","veryLight","light","main","dark","contrast","secondary","error","facebook","animatedView","top","left","right","position","padding","borderRadius","zIndex","errorTheme","backgroundColor","successTheme","titleText","notificationView","Notification","content","themeType","clearNotification","useState","Animated","Value","positionY","useEffect","sequence","spring","toValue","useNativeDriver","delay","timing","duration","easing","Easing","ease","start","finished","theming","View","style","transform","translateY","Text","testID","Array","isArray","map","line","key","IconButton","icon","onPress","container","infoText","underlinedText","textDecorationLine","MoveToPage","moveAction","TouchableOpacity","input","Dimensions","get","inputMultiline","inputContainer","color","titleIsValid","length","descriptionIsValid","description","brandIsValid","brand","itemInputIsValid","priceGroup","itemImage","clientUrl","placeHolders","password","passwordConfirm","email","itemTitle","itemDescription","itemBrand","searchTitle","searchDescription","searchBrand","matchPost","labels","labels_RED_TITLE","FormTextInput","value","handleValueChange","isEditable","isVisible","TextInput","onChangeText","placeholder","blurOnSubmit","editable","autoCapitalize","multiline","numberOfLines","autoCorrect","secureTextEntry","textContentType","mode","colors","flex","waitText","WaitSpinner","ActivityIndicator","size","SignUpForm","submitSignUp","submitting","submitAllowed","showErrors","setShowErrors","showPassword","setShowPassword","validationSchema","Yup","min","required","oneOf","initialValues","onSubmit","values","validateOnChange","validateOnBlur","handleChange","errors","handleSubmit","Button","disabled","logoContainer","image","HeaderLogo","logoImageSource","require","Image","resizeMode","source","uri","SignUp","changePageToShow","setSubmitting","notification","setNotification","useContext","a","async","personValues","axios","post","query","variables","signUpInput","response","responseData","parsedSignUpData","type","SET_LOGGED_IN_USER","console","log","result","toString","includes","useHandleSignUp","facebookButtonContainer","parseLoginResponse","loginPerson","parseFacebookLoginResponse","facebookLogin","facebookName","LoginWithFacebook","submitFacebookLogin","isDisabled","Facebook","appId","permissions","responseObject","token","userId","LoginForm","submitLogin","Login","loginInput","parsedLoginData","accessToken","facebookAccessToken","facebookLoginInput","useHandleLogin","SignUpLogin","showing","setShowing","show","cameraView","display","cameraButtonsView","previewImageView","Math","previewButtonsView","previewImageViewContainer","ExpoCameraButton","action","icons","flip","snap","cancel","remove","save","ExpoCamera","setPhoto","hasPermission","setHasPermission","Camera","Constants","Type","front","setType","cameraRef","setCameraRef","requestPermissionsAsync","status","ref","newType","back","takePictureAsync","photo","PhotoPreviewView","declinePhoto","cancelTakingPhoto","savePhoto","PriceGroupEnum","parseUploadServerResponseData","publicId","public_id","secureUrl","secure_url","itemUnderConstructionImageVar","makeVar","matchToHandleVar","selectedMatchVar","ImagingScreen","navigation","useNavigation","setImage","uploadPhoto","formData","FormData","photoBlob","dataURLToBlob","append","configurations","uploadImageResponse","uploadedImageData","useUploadPhoto","setUploadedImage","uploadedImage","navigate","homeScreen","bottom","pageTitle","subtitle","myItemsContainer","marginLeft","marginRight","flexGrow","myItemButtonContainer","itemImageButton","imageView","iconView","itemDetailsContainer","alignContent","myItemTitle","myItemTitleDelete","matchText","scrollView","deleteButtonContainer","deleteIconsContainer","deleteButton","deleteView","deleteIconContainer","margin","MY_ITEMS","gql","DeleteView","displayTitle","myItem","cancelShowDeleteView","isConfirmed","setIsConfirmed","imageSecureUrl","toLocaleUpperCase","CheckBox","checked","checkedColor","textStyle","containerStyle","borderWidth","SCREEN_WIDTH","SWIPE_RELEASE_TRESHOLD","MyItemButton","showingDelete","setShowingDelete","reactiveVars","useRef","ValueXY","x","y","current","panResponder","PanResponder","onStartShouldSetPanResponder","_event","_gestureState","onPanResponderMove","gestureState","setValue","dx","onPanResponderRelease","getPanResponder","matches","matchedFrom","matchedTo","forEach","itemMatchedFrom","isMatched","itemFrom","itemMatchedTo","push","every","matchedItem","getMatchedData","substring","item","translateX","panHandlers","Home","useQuery","loading","showErrorNotification","setShowErrorNotification","myItems","ScrollView","SCREEN_HEIGHT","SWIPE_LEFT_TRESHOLD","CARD_WIDTH","CARD_HEIGHT","MIDDLE_CARD_ORIGO","LEFT_CARD_ORIGO","LEFTMOST_CARD_ORIGO","RIGHT_CARD_ORIGO","RIGHTMOST_CARD_ORIGO","browseContainer","pickPriceGroupsButtonsContainer","pickButton","borderColor","paleText","priceGroupTitle","groupTitle","searchCriteriaContainer","star","rowContainer","submitButtonContainer","cancelButtonContainer","fetchMoreContainer","noItemsText","noItemsContainer","priceGroups","groupEnum","GROUP_1","GROUP_2","GROUP_3","PickPriceGroupsButtons","selectedPriceGroups","priceGroupSelectionChanged","isSelectedColor","group","BrowseSearchTerms","searchTerms","searchCriteriaChanged","setShowSetSearchCriteria","setSelectedPriceGroups","phrasesInTitle","join","titlePhrases","setTitlePhrases","phrasesInDescription","descriptionPhrases","setDescriptionPhrases","brands","setBrands","filter","selectedGroup","seachCriteria","split","word","trim","BROWSE_ITEMS_BY_PAGE","MY_ITEMS_FOR_CAROUSEL","performSetCardOrigoValues","cardOrigos","middle","dy","leftmost","rightmost","returnCardsToStartPosition","origos","animations","origoName","targetValue","parallel","swipeCardOut","direction","updateCards","cardBoard","paddingTop","descriptionText","priceGroupText","matchDataButtonsContainer","matchButton","imageAndMatchDataIconsContainer","matchDataNumber","matchDataView","matchIconButtonContainer","iconBackgroundCircle","noItemsTextContainer","CardContent","cardData","matchData","couldMatch","myItemsMatchedWithThis","myItemsMatchedFromThis","myItemsMatchedToThis","Fragment","getMatchData","thisItem","myItemIdsMatchedToThisItem","myItemIdsMatchedFromThisItem","toId","fromId","myItemIdsMatchedWithThisItem","myId","bothWayItem","toItem","fromItem","CarouselMiddleCard","onlySwipeOutToLeftAllowed","onlySwipeOutToRightAllowed","isAnOnlyCard","panResponderBoth","panResponderOnlySwipeOutToLeft","panResponderOnlySwipeOutToRight","carouselRow","CarouselSideCard","sideCardOrigo","Carousel","itemCards","middleCardIndex","setMiddleCardIndex","change","Browse","setSearchTerms","browseNotification","setBrowseNotification","myItemsNotification","setMyItemsNotification","showSetSearchCriteria","useLazyQuery","browseItemsByPage","browseLoading","browseError","browseData","fetchMore","myItemsLoading","myItemsError","myItemsData","client","useApolloClient","browseItems","browseItemsAsCarouselCards","edges","edge","node","cache","modify","fields","browseItemsByPageInput","first","browseItemsInput","pageInfo","hasNextPage","after","endCursor","removeAccountButtonView","pageContentContainer","REMOVE_ACCOUNT","parseRemoveAccountServerResponse","removeAccountResponse","removePerson","RemoveAccount","showConfirmRemoveAccount","setShowConfirmRemoveAccount","isSubmitting","setIsSubmitting","useMutation","removeAccount","submitRemoveAccount","parsedResponse","useRemoveAccount","center","logoutButtonView","contentContainer","Logout","Settings","priceGroupInfo","priceGroupInfoWithError","priceGroupAndImageContainer","priceGroupToggleButtonsContainer","toggleButton","toggleButtonOrImageContainer","ItemImage","useReactiveVar","navigateToImaging","TogglePriceGroupButtons","setPriceGroup","ADD_ITEM","setAddItemOutcomeNotification","clearAll","useAddItem","update","existingItems","newItemRef","writeFragment","addItem","fragment","updateCacheAfterAddedItem","submitAddItem","itemDetails","addItemInput","RoutesEnum","Add","setTitle","setDescription","setBrand","imagePublicId","matchImage","imageRowContainer","myItemImage","matchButtonView","iconContainer","matchImageRowContainer","removeWarningContainer","removeWarningText","matchImageCentralIconsContainer","newPostContainer","postIconBackgroundCircle","manageMatchPageContainer","chatContainer","chatPostContainer","dateTimeText","fontStyle","avatarContainer","MY_ITEMS_IN_CACHE","ITEMS_CHAT","REMOVE_MATCH","ADD_MATCH","ADD_POST","useHandleMatch","addMatch","removeMatch","submitAddMatch","addMatchInput","myItemId","itemToId","otherItem","changeMatchInput","submitRemoveMatch","removeMatchInput","RemoveMatch","compact","MatchedItemsImages","selectedMatch","setShowRemoveWarning","ChatPost","isMyItem","imageUrl","dateTime","date","Date","parseInt","getMonth","getDate","getFullYear","getHours","getMinutes","month","day","year","hours","minutes","today","time","getDay","getDisplayDateTime","createdAt","ChatPostList","posts","index","postingItemId","NewChatPost","refetchPosts","newPost","setNewPost","submittingPost","setSubmittingPost","postNotification","setPostNotification","addPost","submitPost","itemIdA","itemIdB","addPostInput","useHandleChat","ManageMatch","showRemoveWarning","itemsChatInput","pollInterval","refetch","itemsChat","currentState","ManageMatchAction","act","successInMatching","viewMatch","cancelHandleMatch","buttonLabels","TO","FROM","BOTH","AVAILABLE","titles","ItemImageButtonsRow","itemsForButtons","setAction","mainItem","MatchesPage","matchToHandle","myItemsInCache","myItemsStillAvailable","mathes","itemsAvailable","itemInCache","bothWaysItem","myItemsAvailableToMatch","HandleMatch","ManageAction","Match","readQuery","assertNever","JSON","stringify","enableScreens","ScreensWithVisibleTabBar","Tab","createBottomTabNavigator","Navigator","screenOptions","route","tabBarIcon","HOME","Ionicons","BROWSE","MaterialIcons","ADD","SETTINGS","IMAGING","MATCH","getTabBarIcon","tabBarTestID","tabBarOptions","activeTintColor","inactiveTintColor","Screen","component","MainApp","httpLink","createHttpLink","authorizationLink","setContext","_","authorization","ApolloClient","link","concat","connectToDevTools","InMemoryCache","typePolicies","Query","itemUnderConstruction","read","keyArgs","merge","existing","incoming","existingBrowseItemsByPage","updatedEgdes","Stack","createStackNavigator","NavigationContainer","header","reducer","_state","AppContextWithState","children","useReducer","Provider","App","module","exports"],"mappings":"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","file":"static/js/app.d764ad9a.chunk.js","sourcesContent":["export enum ActionTypesEnum {\n    'SET_LOGGED_IN_USER' = 'setLoggedInUser',\n\n}","import { AppStateType } from '../types/app-state/AppStateType'\n\nexport const initialState: AppStateType = {\n    loggedInUser: undefined,\n}","import { createContext } from 'react'\nimport { initialState } from './initialState'\nimport { AppContextType } from '../types/app-state/AppContextType'\n\nconst AppContext = createContext<AppContextType>({\n    state: initialState,\n    dispatch: () => null\n})\n\nexport default AppContext\n\n","import { StyleSheet } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n    title: {\n        marginTop: 10,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    iconButtonView: {\n        marginTop: 5,\n        justifyContent: 'center',\n    },\n    loginButtonView: {\n        marginTop: 5,\n        justifyContent: 'center',\n        marginBottom: 5,\n    },\n    formContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    waitSpinnerContainer: {\n        height: 60,\n        width: 300,\n    },\n\n})\n","\n// SIGN UP:\nconst SIGN_UP_ERROR_NOTIFICATION_TITLE = 'ERROR IN SIGNUP'\nconst SIGN_UP_ERROR_NOTIFICATION_CONTENT = 'Could not sign up.'\nconst SIGN_UP_ERROR_NOTIFICATION_CONTENT_DUPLICATE_USERNAME = ['Username already exists.',  'Cannot create several users with same username.']\nconst SIGN_UP_ERROR_NOTIFICATION_CONTENT_DUPLICATE_EMAIL = ['Email already exists.',  'Cannot create several users with the same email.']\nexport const SIGN_UP_NOTIFICATION = {\n    errorTitle: SIGN_UP_ERROR_NOTIFICATION_TITLE,\n    errorGeneralContent: SIGN_UP_ERROR_NOTIFICATION_CONTENT,\n    errorDuplicateUsernameContent: SIGN_UP_ERROR_NOTIFICATION_CONTENT_DUPLICATE_USERNAME,\n    errorDuplicateEmailContent: SIGN_UP_ERROR_NOTIFICATION_CONTENT_DUPLICATE_EMAIL,\n}\n\n// LOGIN:\nexport const ERROR_LOGIN_TITLE = 'ERROR IN LOGIN'\nexport const ERROR_LOGIN_CONTENT = 'Could not login.'\n\n// FACEBOOK:\nexport const ERROR_FACEBOOK_TITLE = 'ERROR IN FACEBOOK LOGIN'\nexport const ERROR_FACEBOOK_CONTENT = 'Something went wrong. Could not login with Facebook.'\n\n\n// REMOVE ACCOUNT:\nconst SUCCESS_REMOVE_ACCOUNT_TITLE = 'SUCCESS IN REMOVE ACCOUNT'\nconst SUCCESS_REMOVE_ACCOUNT_CONTENT = 'Your account has been successfully removed.'\nconst ERROR_REMOVE_ACCOUNT_TITLE = 'ERROR IN REMOVING ACCOUNT'\nconst ERROR_REMOVE_ACCOUNT_CONTENT = 'Something went wrong. Your account cound not be removed.'\nexport const REMOVE_ACCOUNT_NOTIFICATION = {\n    errorTitle: ERROR_REMOVE_ACCOUNT_TITLE,\n    errorContent: ERROR_REMOVE_ACCOUNT_CONTENT,\n    successTitle: SUCCESS_REMOVE_ACCOUNT_TITLE,\n    successContent: SUCCESS_REMOVE_ACCOUNT_CONTENT\n}\n\n\n\n// ADD ITEM:\nconst SUCCESS_ADD_ITEM_TITLE = 'SUCCESS IN ADD NEW ITEM'\nconst SUCCESS_ADD_ITEM_CONTENT = 'The new item has been successfully added.'\nconst ERROR_ADD_ITEM_TITLE = 'ERROR IN ADDING NEW ITEM'\nconst ERROR_ADD_ITEM_CONTENT = 'Something went wrong. Item could not be added.'\nexport const ADD_ITEM_NOTIFICATION = {\n    errorTitle: ERROR_ADD_ITEM_TITLE,\n    errorContent: ERROR_ADD_ITEM_CONTENT,\n    successTitle: SUCCESS_ADD_ITEM_TITLE,\n    successContent: SUCCESS_ADD_ITEM_CONTENT\n}\n","import { SignUpPersonResponseType } from './queries'\nimport { ParsedLoginSignUpDataType } from '../../types/signup-login/ParsedLoginSignUpDataType'\n\n\n\nexport const parseSignUpResponse = (data: SignUpPersonResponseType | undefined | null ): ParsedLoginSignUpDataType => {\n    \n    if (!data) throw new Error('No data was returned from the sign up query.')\n    if (typeof data.signUpPerson.success !== 'boolean') throw new Error('Response success type must be boolean.')\n\n    if (!data.signUpPerson.success) return { errorMessage: data.signUpPerson.message, loggedInUserData: undefined } //data.signUpPerson.message\n\n    return {\n        errorMessage: undefined,\n        loggedInUserData: {\n            id: parseText(data.signUpPerson.id, 'User id'),\n            loginType: 'traditional',\n            name: parseText(data.signUpPerson.username, 'Username (for name field)'),\n            jwtToken: parseText(data.signUpPerson.jwtToken, 'Token'),\n        }\n    }\n}\n\n\nconst parseText = (text: unknown, target: string): string => {\n    if (!text || !isString(text)) throw new Error(`When present, ${target} must be string.`)\n    return text\n}\n\n\nconst isString = (text: unknown): text is string => {\n    return typeof text === 'string' || text instanceof String\n}\n","import { useContext, useState } from 'react'\nimport { SignUpFormikValuesType } from './SignUpForm'\nimport { NotificationPropsType } from 'src/types/notification/NotificationPropsType'\nimport AppContext from '../../app-state/AppContext'\nimport { ActionTypesEnum } from '../../types/app-state/ActionTypesEnum'\nimport { SIGN_UP_NOTIFICATION } from '../../utils/common-constants/errorMessages'\nimport { SIGN_UP_PERSON, SignUpPersonVariablesType, SignUpPersonResponseType } from './queries'\nimport axios from 'axios'\nimport { LOCALHOST_GRAPHQL } from '@env'\nimport { parseSignUpResponse } from './parseSignUpResponse'\n\n\ntype UseHandleSignUpType = {\n    submitting: boolean,\n    submitSignUp: (values: SignUpFormikValuesType) => Promise<void>,\n    notification: NotificationPropsType | undefined\n}\n\nconst CONFIGURATIONS = {\n    headers: {\n        'Content-Type': 'application/json'\n    }\n}\n\n\nexport const useHandleSignUp = (): UseHandleSignUpType => {\n\n    const [submitting, setSubmitting] = useState(false)\n    const [notification, setNotification] = useState<NotificationPropsType | undefined>(undefined)\n    const { dispatch } = useContext(AppContext)\n\n\n    const submitSignUp = async (values: SignUpFormikValuesType): Promise<void> => {\n\n        setSubmitting(true)\n        let personValues: SignUpPersonVariablesType = { username: values.username, password: values.password }\n        if (values.email) {\n            personValues = { ...personValues, email: values.email }\n        }\n    \n        try {\n            const response = await axios.post(LOCALHOST_GRAPHQL, {\n                    query: SIGN_UP_PERSON,\n                    variables: { signUpInput: personValues }\n                }, CONFIGURATIONS)\n            const responseData = response.data as unknown as { data: SignUpPersonResponseType }\n            const parsedSignUpData = parseSignUpResponse(responseData.data)\n            if (parsedSignUpData.errorMessage) throw new Error(parsedSignUpData.errorMessage)\n            dispatch({ type: ActionTypesEnum.SET_LOGGED_IN_USER, data: parsedSignUpData.loggedInUserData })\n        } catch (error) {\n            console.log(error)\n            let result: 'error' | 'duplicateUsername' | 'duplicateEmail' = 'error'\n            if (error.toString().includes('Duplicate email')) result = 'duplicateEmail'\n            if (error.toString().includes('Duplicate username')) result = 'duplicateUsername'\n            const notificationContent = result === 'error' ? \n                SIGN_UP_NOTIFICATION.errorGeneralContent : result === 'duplicateUsername' ? \n                    SIGN_UP_NOTIFICATION.errorDuplicateUsernameContent : SIGN_UP_NOTIFICATION.errorDuplicateEmailContent\n            setNotification({\n                title: SIGN_UP_NOTIFICATION.errorTitle,\n                content: notificationContent,\n                themeType: 'error',\n                clearNotification: () => setNotification(undefined)\n            })\n            setSubmitting(false)\n        }\n    }\n\n\n\n\n    return {\n        submitting,\n        submitSignUp,\n        notification\n    }\n\n}","export const theme = {\n    colors: {\n        primary: {\n            veryLight: '#919191',\n            light: '#6d6d6d',\n            main: '#424242',\n            dark: '#212121',\n            contrast: '#FFFFFF', //'#ff9800'\n        },\n        secondary: {\n            light: '#efefef',//'#ffc947',\n            main: '#bdbdbd', //'#ff9800',\n            dark: '#8d8d8d', // '#c66900',\n            contrast: '#000000'\n        },\n        error: '#d50000',\n        success: '#90cc00',\n        facebook: '#4267B2'\n    }\n}\n\n","import { StyleSheet } from 'react-native'\nimport { theme } from '../../../theme/theme'\n\n\nexport const NOTIFICATION_VIEW_HEIGHT = 70\nexport const SPACING = 5\n\n\nexport const styles = StyleSheet.create({\n    animatedView: {\n        top: 40,\n        left: SPACING,\n        right: SPACING,\n        position: 'absolute',\n        padding: 5,\n        height: NOTIFICATION_VIEW_HEIGHT,\n        borderRadius: 6,\n        zIndex: 10,\n    },\n    errorTheme: {\n        backgroundColor: theme.colors.error,\n    },\n    successTheme: {\n        backgroundColor: theme.colors.success,\n    },\n    titleText: {\n        fontWeight: 'bold',\n    },\n    notificationView: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n    }\n})\n","import React, { useState, useEffect } from 'react'\nimport {  Animated, Text, Easing, View } from 'react-native'\nimport { styles, NOTIFICATION_VIEW_HEIGHT, SPACING } from './styles'\nimport { IconButton } from 'react-native-paper'\nimport { NotificationPropsType } from '../../../types/notification/NotificationPropsType'\n\n\n\n\nconst Notification: React.FC<NotificationPropsType> = ({ title, content, themeType, clearNotification }) => {\n\n\n    const [positionY] = useState(new Animated.Value(-NOTIFICATION_VIEW_HEIGHT - SPACING))\n    \n    const displayNotification = () => {\n        Animated.sequence([\n            Animated.spring(positionY, {\n                toValue: 0,\n                useNativeDriver: false\n            }),\n            Animated.delay(5000),\n            Animated.timing(positionY, {\n                duration: 500,\n                toValue: -NOTIFICATION_VIEW_HEIGHT - SPACING,\n                easing: Easing.ease,\n                useNativeDriver: false\n            })\n        ]).start(({ finished }) => {\n            if (finished) clearNotification()\n        })\n    }\n\n    const hideNotification = () => {\n        Animated.timing(positionY, {\n            duration: 300,\n            toValue: -NOTIFICATION_VIEW_HEIGHT - SPACING,\n            easing: Easing.ease,\n            useNativeDriver: false\n        }).start(({ finished }) => {\n            if (finished) clearNotification()\n        })\n    }\n\n    useEffect(() => {\n        displayNotification()\n    },[])\n\n\n    const theming = themeType === 'error' ? styles.errorTheme : styles.successTheme\n\n    return (\n        <Animated.View style={[theming, styles.animatedView, { transform: [{ translateY: positionY }]}]}>\n            <View style={[styles.notificationView]}>\n                <View>\n                    <Text style={styles.titleText} testID={`notification-${themeType}`}>{title}</Text>\n                    {Array.isArray(content) ?\n                        content.map(line => <Text key={line}>{line}</Text>)\n                        :\n                        <Text>{content}</Text>\n                    }\n                </View>   \n                <IconButton\n                    icon='close-circle-outline'\n                    onPress={hideNotification}\n                    testID='notification-close-button'\n                />\n            </View>\n \n        </Animated.View>\n\n    )\n}\n\nexport default Notification\n\n\n\n","import { StyleSheet } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n    container: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    infoText: {\n        marginTop: 10,\n        // marginBottom: 2\n    },\n    underlinedText: {\n        fontSize: 18,\n        textDecorationLine: 'underline'\n    },\n})\n","import React from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { styles } from './styles'\n\n\n\ntype MoveToPagePropsType = {\n    infoText: string,\n    underlinedText: string,\n    moveAction: () => void\n}\n\nconst MoveToPage: React.FC<MoveToPagePropsType> = ({ infoText, underlinedText, moveAction }) => {\n    return (\n        <View  style={styles.container}>\n            <Text style={styles.infoText}>\n                {infoText}\n            </Text>\n            <TouchableOpacity onPress={moveAction} testID='move-to-touchable'>\n                <Text style={styles.underlinedText} testID={`move-to-${underlinedText}`}>\n                    {underlinedText}\n                </Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nexport default MoveToPage\n\n\n","import { StyleSheet } from 'react-native'\nimport { theme } from '../../../theme/theme'\nimport { Dimensions } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n    input: {\n        height: 40,\n        fontSize: 16,\n        width: Dimensions.get('window').width * 0.8\n    },\n    inputMultiline: {\n        // height: 80,\n        fontSize: 16,\n        width: Dimensions.get('window').width * 0.8\n    },\n    inputContainer: {\n        marginTop: 5,\n    },\n    error: {\n        color: theme.colors.error,      \n    },\n})\n","import { PriceGroupEnum } from '../../types/item/PriceGroupEnum'\nimport { UploadedImageType } from '../../types/item/UploadedImageType'\n\nconst TITLE_MIN_LENGTH = 3\nconst TITLE_MAX_LENGTH = 35\nconst DESCRIPTION_MIN_LENGTH = 3\nconst DESCRIPTION_MAX_LENGTH = 300\nconst BRAND_MIN_LENGTH = 1\nconst BRAND_MAX_LENGTH = 35\n\nexport const ADD_VALIDATION_CONSTANTS = {\n    titleMin: TITLE_MIN_LENGTH,\n    titleMax: TITLE_MAX_LENGTH,\n    descriptionMin: DESCRIPTION_MIN_LENGTH, \n    descriptionMax: DESCRIPTION_MAX_LENGTH,\n    brandMin: BRAND_MIN_LENGTH,\n    brandMax: BRAND_MAX_LENGTH\n}\n\n\nexport const titleIsValid = (title: string) => {\n    return title !== '' && title.length >= TITLE_MIN_LENGTH && title.length <= TITLE_MAX_LENGTH\n}\n\nexport const descriptionIsValid = (description: string) => {\n    return description !== '' && description.length >= DESCRIPTION_MIN_LENGTH && description.length <= DESCRIPTION_MAX_LENGTH\n}\n\nexport const brandIsValid = (brand: string) => {\n    return brand.length >= BRAND_MIN_LENGTH && brand.length <= BRAND_MAX_LENGTH\n}\n\nexport const itemInputIsValid = (title: string, description: string, brand: string, priceGroup: PriceGroupEnum | '', itemImage: UploadedImageType | undefined) => {\n    if (!itemImage || !itemImage.clientUrl) return false\n    if (!titleIsValid(title)) return false\n    if (!descriptionIsValid(description)) return false\n    if (priceGroup === '') return false\n    if (brand !== '' && !brandIsValid(brand)) return false\n    return true\n}\n\n","import { ADD_VALIDATION_CONSTANTS } from '../../add/validations'\n\n\n    export type InputType = 'username' | 'password' | 'passwordConfirm' | 'email' \n    | 'itemTitle' | 'itemDescription' | 'itemBrand' | 'searchTitle' | 'searchDescription' | 'searchBrand'\n    | 'matchPost'\n\n    export const placeHolders = {\n        username: '',\n        password: '', \n        passwordConfirm: '', \n        email: '', \n        itemTitle: '',\n        itemDescription: '',\n        itemBrand: '',\n        searchTitle: 'e.g. table, sofa, chair',\n        searchDescription: 'e.g. living room, white, like new',\n        searchBrand: 'e.g. Interface, Pohjanmaan',\n        matchPost: 'Type a new message here...'\n    }\n\n    export const labels = {\n        username: 'Username',\n        password: 'Password',\n        passwordConfirm: 'Confirm password',\n        email: 'Email (optional, for password reset purpose)',\n        itemTitle: 'Give a short title (e.g. bread maker, microwave oven)',\n        itemDescription: 'Describe the item shortly (e.g. color, condition)',\n        itemBrand: 'Brand and possible model (optional)',\n        searchTitle: '',\n        searchDescription: '',\n        searchBrand: '',\n        matchPost: ''\n    }\n    \n    export const labels_RED_TITLE = {\n        username: 'Username',\n        password: 'Password',\n        passwordConfirm: 'Confirm password',\n        email: 'Email (optional, for password reset purpose)',\n        itemTitle: `Title (${ADD_VALIDATION_CONSTANTS.titleMin}-${ADD_VALIDATION_CONSTANTS.titleMax} characters) is required`,\n        itemDescription: `Description (${ADD_VALIDATION_CONSTANTS.descriptionMin}-${ADD_VALIDATION_CONSTANTS.descriptionMax} characters) is required`,\n        itemBrand: `Brand (${ADD_VALIDATION_CONSTANTS.brandMin}-${ADD_VALIDATION_CONSTANTS.brandMax} characters) is required`,\n        searchTitle: '',\n        searchDescription: '',\n        searchBrand: '',\n        matchPost: 'Message must be at least 1 characters long!'\n    }","import React from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { TextInput } from 'react-native-paper'\nimport { theme } from '../../../theme/theme'\nimport { InputType, labels, labels_RED_TITLE, placeHolders } from './formTextInputLabels'\n\n\n\n\ntype FormTextInputPropsType = {\n    target: InputType,\n    value: string,\n    handleValueChange: (newValue: string) => void,\n    isEditable: boolean,\n    isVisible: boolean,\n    error?: string,\n}\n\n\n\nconst FormTextInput: React.FC<FormTextInputPropsType> = ({ target, value, handleValueChange, isEditable, isVisible, error }) => {\n\n    return (\n        <View style={styles.inputContainer}>\n            <Text \n                style={error === 'RED_TITLE' ? { color: theme.colors.error } : null}\n                testID={`FormTextInputLabel-${target}`}\n            >\n                {error === 'RED_TITLE' ?\n                    labels_RED_TITLE[target]\n                    :\n                    labels[target]\n                }\n                </Text>\n            <TextInput\n                value={value}\n                onChangeText={handleValueChange}\n                placeholder={placeHolders[target]}\n                blurOnSubmit={true}\n                editable={isEditable}\n                autoCapitalize='none'\n                multiline={target === 'matchPost' ? true : false}\n                numberOfLines={target === 'matchPost' ? 3 : 1}\n                autoCorrect={false}\n                secureTextEntry={!isVisible}\n                textContentType='oneTimeCode'\n                style={target === 'matchPost' ? styles.inputMultiline : styles.input}\n                mode='outlined'\n                theme={{ colors: { text: theme.colors.primary.main,   primary: theme.colors.primary.main } }}\n                testID={`FormTextInputInput-${target}`}\n            />\n            {error && error !== 'RED_TITLE' &&\n                <Text style={styles.error} testID={`error-${target}`}>{error}</Text>\n            }\n        </View>\n                            \n\n    )\n}\n\nexport default FormTextInput","import { StyleSheet } from 'react-native'\n\n\n\nexport const styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    waitText: {\n        marginTop: 5\n    }\n})\n","import React from 'react'\nimport { ActivityIndicator, View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { theme } from '../../../theme/theme'\n\n\nconst WaitSpinner = () => {\n    return (\n        <View style={styles.container}>\n            <ActivityIndicator size=\"large\" color={theme.colors.primary.main}/>\n            <Text  style={styles.waitText}>Loading, please wait...</Text>\n        </View>\n    )\n}\n\n\n  \nexport default WaitSpinner","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport { Formik } from 'formik'\nimport { signUpValidationSchema } from './signUpValidationSchema'\nimport FormTextInput from '../common-components/form-text-input/FormTextInput'\nimport { styles } from './styles'\nimport { theme } from '../../theme/theme'\n// import { IconButton } from 'react-native-paper'\n// import { Button } from 'react-native-paper'\nimport IconButton from 'react-native-paper/src/components/IconButton'\nimport Button from 'react-native-paper/src/components/Button'\nimport WaitSpinner from '../common-components/wait-spinner/WaitSpinner'\n\n\nexport type SignUpFormikValuesType = {\n    username: string, \n    password: string, \n    passwordConfirm: string,\n    email?: string\n}\n\ntype SignUpFormPropsType = {\n    submitSignUp: (values: SignUpFormikValuesType) => Promise<void>,\n    submitting: boolean,\n    submitAllowed: boolean\n}\n\n\n\nconst SignUpForm: React.FC<SignUpFormPropsType> = ({ submitSignUp, submitting, submitAllowed }) => {\n\n    const initialValues = { username: '', password: '', passwordConfirm: '', email: '' }\n    const [showErrors, setShowErrors] = useState(false)\n    const [showPassword, setShowPassword] = useState(false)\n    const validationSchema = signUpValidationSchema()\n\n    return (\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={(values) => submitSignUp(values)}\n                    validateOnChange={showErrors}\n                    validateOnBlur={showErrors}\n                >\n                    {({ values, handleChange, errors, handleSubmit }) => {\n                        return (\n                            <View style={styles.formContainer}>\n                                <View>\n                                    <FormTextInput\n                                        target='username'\n                                        value={values.username}\n                                        handleValueChange={handleChange('username')}\n                                        isEditable={!submitting}\n                                        isVisible={true}\n                                        error={errors.username}\n                                    />                       \n                                    <FormTextInput\n                                        target='password'\n                                        value={values.password}\n                                        handleValueChange={handleChange('password')}\n                                        isEditable={!submitting}\n                                        isVisible={showPassword}\n                                        error={errors.password}\n                                    />              \n                                    <FormTextInput\n                                        target='passwordConfirm'\n                                        value={values.passwordConfirm}\n                                        handleValueChange={handleChange('passwordConfirm')}\n                                        isEditable={!submitting}\n                                        isVisible={showPassword}\n                                        error={errors.passwordConfirm}\n                                    />\n                                    <FormTextInput\n                                        target='email'\n                                        value={values.email}\n                                        handleValueChange={handleChange('email')}\n                                        isEditable={!submitting}\n                                        isVisible={true}\n                                        error={errors.email}\n                                    />     \n                                </View>\n\n                                <View style={styles.iconButtonView}>\n                                    <IconButton\n                                        icon={showPassword ? 'eye-off' : 'eye'}\n                                        color={theme.colors.primary.main}\n                                        onPress={() => setShowPassword(!showPassword)}\n                                    />\n                                </View>\n\n                                <View style={styles.loginButtonView}>\n                                    <Button \n                                        icon='send'\n                                        mode='contained' \n                                        onPress={() => {\n                                            if (!showErrors) setShowErrors(true)\n                                            handleSubmit()\n                                        }}\n                                        disabled={!submitAllowed}\n                                        color={theme.colors.primary.main}\n                                        testID='submit-sign-up'\n                                    >\n                                        SIGN UP\n                                    </Button>\n                                </View>\n\n                                <View  style={styles.waitSpinnerContainer}>\n                                    {submitting &&\n                                        <WaitSpinner/>\n                                    }\n                                </View>\n                            </View>\n                        )\n                    }}\n                </Formik>           \n    )\n}\n\nexport default SignUpForm\n\n","import * as Yup from 'yup'\nimport { SignUpType } from '../../types/signup-login/SignUpType'\n\nexport const signUpValidationSchema = (): Yup.SchemaOf<SignUpType> => {\n    return Yup.object({\n        username: Yup.string()\n            .min(3, 'Username must be at least 3 characters long')\n            .required('Required'),\n        password: Yup.string()\n            .min(8, 'Password must be at least 8 characters long')\n            .required('Required'),\n        passwordConfirm: Yup.string()\n            .oneOf([Yup.ref('password')], 'Passwords must match')\n            .required('Required'),\n        email: Yup.string()\n            .email('Email must be a proper email')\n               \n    })\n}\n","import { StyleSheet } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n\n    logoContainer: {\n        marginTop: 30,\n        // marginBottom: 10,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n\n    image: {\n        width: 220,\n        height: 50,\n        \n    }\n})\n","import React from 'react'\nimport { View, Image } from 'react-native'\nimport { styles } from './styles'\n\n\n\nconst HeaderLogo = () => {\n\n    const logoImageSource = process.env.NODE_ENV === 'test' ? null : require('../../assets/LOGO.png')\n    \n    return (\n        <View style={styles.logoContainer}>\n            {logoImageSource !== null &&\n                <Image \n                    resizeMode='contain'\n                    source={{ uri: logoImageSource }}\n                    style={styles.image} \n                />                \n            }\n  \n        </View>\n    )\n}\n\n\nexport default HeaderLogo\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { useHandleSignUp } from './useHandleSignUp'\nimport Notification from '../common-components/notification/Notification'\nimport MoveToPage from '../common-components/move-to-page/MoveToPage'\nimport SignUpForm from './SignUpForm'\nimport HeaderLogo from '../header/HeaderLogo'\n\n\n\ntype SignUpPropsType = {\n    changePageToShow: (show: 'login' | 'signup') => void\n}\n\n\n\nconst SignUp: React.FC<SignUpPropsType> = ({ changePageToShow }) => {\n\n    const { submitting, submitSignUp, notification } = useHandleSignUp()\n\n    return (\n        <View>\n            {notification !== undefined &&\n                <Notification  { ...notification }/>\n            } \n            <HeaderLogo/>         \n            <Text style={styles.title} testID='title-sign-up'>SIGN UP</Text>\n            <SignUpForm\n                submitSignUp={submitSignUp}\n                submitting={submitting}\n                submitAllowed={!submitting && notification === undefined}\n            />\n            <MoveToPage\n                infoText='Already have an account?'\n                moveAction={() => changePageToShow('login')}\n                underlinedText='LOGIN'\n            /> \n        </View>\n    )\n}\n\nexport default SignUp\n\n","import { gql } from '@apollo/client'\n\n\n// axios query is the same as Apollo Client query except for the missing gql prior to ``\nexport const SIGN_UP_PERSON = `\nmutation signUpPerson($signUpInput: SignUpInput!) {\n    signUpPerson(signUpInput: $signUpInput) {\n        code\n        success\n        message\n        id\n        username\n        facebookName\n        jwtToken\n    }\n}\n`\n\n\nexport type SignUpPersonVariablesType = {\n    username: string,\n    password: string,\n    email?: string,\n}\n\n\nexport type SignUpPersonResponseType = {\n    signUpPerson: {\n        code: string,\n        success: boolean,\n        message: string,\n        id: string | null,\n        username: string | null,\n        facebookName: string | null,\n        jwtToken: string | null,\n    }\n}\n\n\n\n\n","import { StyleSheet } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n\n    title: {\n        marginTop: 10,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    iconButtonView: {\n        marginTop: 5,\n        justifyContent: 'center',\n    },\n    loginButtonView: {\n        marginTop: 5,\n        justifyContent: 'center',\n        marginBottom: 10,\n    },\n    formContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    waitSpinnerContainer: {\n        height: 70,\n        width: 300,\n    },\n    infoText: {\n        marginTop: 25,\n        marginBottom: 5\n    },\n    facebookButtonContainer: {\n        marginTop: 10\n    },\n    image: {\n        width: 100,\n        height: 100\n    }\n})\n","import { LoginPersonResponseType } from './queries'\nimport { ParsedLoginSignUpDataType } from '../../types/signup-login/ParsedLoginSignUpDataType'\n\n\n\n\nexport const parseLoginResponse = (data: LoginPersonResponseType | undefined | null): ParsedLoginSignUpDataType => {\n    if (!data) throw new Error('No data was returned from the login query.')\n    if (typeof data.loginPerson.success !== 'boolean') throw new Error('Response success type must be boolean.')\n\n    if (!data.loginPerson.success) return { errorMessage: data.loginPerson.message, loggedInUserData: undefined } \n\n    return {\n        errorMessage: undefined,\n        loggedInUserData: {\n            id: parseText(data.loginPerson.id, 'User id'),\n            loginType: 'traditional',\n            name: parseText(data.loginPerson.username, 'Username (for field name)'),\n            jwtToken: parseText(data.loginPerson.jwtToken, 'Token'),\n        }\n    }\n}\n\n\nconst parseText = (text: unknown, target: string): string => {\n    if (!text || !isString(text)) throw new Error(`When present, ${target} must be string.`)\n    return text\n}\n\n\nconst isString = (text: unknown): text is string => {\n    return typeof text === 'string' || text instanceof String\n}\n\n","import { FacebookLoginResponseType } from './queries'\nimport { ParsedLoginSignUpDataType } from '../../types/signup-login/ParsedLoginSignUpDataType'\n\n\n\nexport const parseFacebookLoginResponse = (data: FacebookLoginResponseType | null | undefined): ParsedLoginSignUpDataType => {\n    \n    if (!data) throw new Error('No data was returned from the Facebook login query.')\n\n    if (typeof data.facebookLogin.success !== 'boolean') throw new Error('Response success type must be boolean.')\n\n    if (!data.facebookLogin.success) return { errorMessage: data.facebookLogin.message, loggedInUserData: undefined } \n\n    return {\n        errorMessage: undefined,\n        loggedInUserData: {\n            id: parseText(data.facebookLogin.id, 'User id'),\n            loginType: 'facebook',\n            name: parseText(data.facebookLogin.facebookName, 'Facebook name (for field name)'),\n            jwtToken: parseText(data.facebookLogin.jwtToken, 'Token'),\n        }\n    }\n\n}\n\n\nconst parseText = (text: unknown, target: string): string => {\n    if (!text || !isString(text)) throw new Error(`When present, \"${target}\" must be string.`)\n    return text\n}\n\n\nconst isString = (text: unknown): text is string => {\n    return typeof text === 'string' || text instanceof String\n}\n","import { useContext, useState } from 'react'\nimport { parseLoginResponse } from './parseLoginResponse'\nimport { parseFacebookLoginResponse } from '../login/parseFacebookLoginResponse'\nimport AppContext from '../../app-state/AppContext'\nimport { NotificationPropsType } from '../../types/notification/NotificationPropsType'\nimport { ActionTypesEnum } from '../../types/app-state/ActionTypesEnum'\nimport { ERROR_LOGIN_TITLE, ERROR_LOGIN_CONTENT, ERROR_FACEBOOK_TITLE, ERROR_FACEBOOK_CONTENT } from '../../utils/common-constants/errorMessages'\nimport { LOGIN_PERSON, LOGIN_PERSON_FACEBOOK, LoginPersonResponseType, LoginInputVariablesType, FacebookLoginInputVariablesType, FacebookLoginResponseType } from './queries'\nimport axios from 'axios'\nimport { LOCALHOST_GRAPHQL } from '@env'\n\n\n\ntype UseHandleLoginType = {\n    submitting: boolean,\n    submitLogin: (values: LoginInputVariablesType) => Promise<void>,\n    submitFacebookLogin: (accessToken: string, userId: string) => Promise<void>,\n    notification: NotificationPropsType | undefined,\n    setNotification: (notification: NotificationPropsType | undefined) => void\n}\n\n\nconst CONFIGURATIONS = {\n    headers: {\n        'Content-Type': 'application/json'\n    }\n}\n\n\nexport const useHandleLogin = (): UseHandleLoginType => {\n\n    const [submitting, setSubmitting] = useState(false)\n    const [notification, setNotification] = useState<NotificationPropsType | undefined>(undefined)\n    const { dispatch } = useContext(AppContext)\n\n    \n    const submitLogin = async (values: LoginInputVariablesType): Promise<void> => {\n        setSubmitting(true)\n        try {\n            const response = await axios.post(LOCALHOST_GRAPHQL, {\n                        query: LOGIN_PERSON,\n                        variables: { loginInput: { username: values.username, password: values.password } }\n                }, CONFIGURATIONS)\n            const responseData = response.data as unknown as { data: LoginPersonResponseType }\n            const parsedLoginData = parseLoginResponse(responseData.data)\n            if (parsedLoginData.errorMessage) throw new Error(parsedLoginData.errorMessage)\n            dispatch({ type: ActionTypesEnum.SET_LOGGED_IN_USER, data: parsedLoginData.loggedInUserData })\n        } catch (error) {\n            setSubmitting(false)\n            setNotification({\n                title: ERROR_LOGIN_TITLE,\n                content: ERROR_LOGIN_CONTENT,\n                themeType: 'error',\n                clearNotification: () => setNotification(undefined)\n            })\n        }\n    }\n\n\n    const submitFacebookLogin = async (accessToken: string, userId: string): Promise<void> => {\n        setSubmitting(true)\n        const personValues: FacebookLoginInputVariablesType = { userId: userId, facebookAccessToken: accessToken }\n        try {\n            const response = await axios.post(LOCALHOST_GRAPHQL, {\n                        query: LOGIN_PERSON_FACEBOOK,\n                        variables: { facebookLoginInput: personValues }\n                }, CONFIGURATIONS)\n            const responseData = response.data as unknown as { data: FacebookLoginResponseType }\n            const parsedLoginData = parseFacebookLoginResponse(responseData.data)\n            if (parsedLoginData.errorMessage) throw new Error(parsedLoginData.errorMessage)\n            dispatch({ type: ActionTypesEnum.SET_LOGGED_IN_USER, data: parsedLoginData.loggedInUserData })\n        } catch (error) {\n            setSubmitting(false)\n            setNotification({\n                title: ERROR_FACEBOOK_TITLE,\n                content: ERROR_FACEBOOK_CONTENT,\n                themeType: 'error',\n                clearNotification: () => setNotification(undefined)\n            })\n        }\n    }\n\n\n    return {\n        submitting,\n        submitLogin,\n        submitFacebookLogin,\n        notification,\n        setNotification\n    }\n\n}\n\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport { styles } from './styles'\nimport { theme } from '../../theme/theme'\nimport { Button } from 'react-native-paper'\nimport { ERROR_FACEBOOK_TITLE, ERROR_FACEBOOK_CONTENT } from '../../utils/common-constants/errorMessages'\nimport { NotificationPropsType } from '../../types/notification/NotificationPropsType'\nimport * as Facebook from 'expo-facebook'\nimport { FACEBOOK_LOGIN_APP_ID } from '@env'\n\n\n\ntype LoginWithFacebookPropsType = {\n    submitFacebookLogin: (accessToken: string, userId: string) => Promise<void>, \n    setNotification: (notification: NotificationPropsType | undefined) => void, \n    isDisabled: boolean\n}\n\nexport type FacebookAPIResponseType = {\n    type: string,\n    token: string,\n    userId: string,\n}\n\n\nconst LoginWithFacebook: React.FC<LoginWithFacebookPropsType> = ({ submitFacebookLogin, setNotification, isDisabled }) => {\n\n    const loginWithFacebook = async () => {\n\n        try {\n            await Facebook.initializeAsync({\n                appId: FACEBOOK_LOGIN_APP_ID,\n              })\n              const response = await Facebook.logInWithReadPermissionsAsync({ permissions: ['public_profile'] })\n              const responseObject = response as FacebookAPIResponseType\n              if (responseObject.type === 'success') {\n                await submitFacebookLogin(responseObject.token, responseObject.userId)\n              } \n        } catch (error) {\n            console.log('error', error)\n            setNotification({\n                title: ERROR_FACEBOOK_TITLE,\n                content: ERROR_FACEBOOK_CONTENT,\n                themeType: 'error',\n                clearNotification: () => setNotification(undefined)\n            })\n        }\n    }\n\n    return (\n        <View style={styles.facebookButtonContainer}>\n            <Button \n                mode='contained' \n                onPress={loginWithFacebook}\n                disabled={isDisabled}\n                color={theme.colors.facebook}\n            >\n                LOGIN WITH FACEBOOK\n            </Button>                                            \n        </View>\n    )\n}\n\nexport default LoginWithFacebook\n\n","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport { Formik } from 'formik'\nimport { loginValidationSchema } from './loginValidationSchema'\nimport FormTextInput from '../common-components/form-text-input/FormTextInput'\nimport { styles } from './styles'\nimport { theme } from '../../theme/theme'\n// import { IconButton } from 'react-native-paper'\n// import { Button } from 'react-native-paper'\nimport IconButton from 'react-native-paper/src/components/IconButton'\nimport Button from 'react-native-paper/src/components/Button'\nimport { NotificationPropsType } from '../../types/notification/NotificationPropsType'\n// import { LoginType } from '../../types/signup-login/LoginType'\nimport { LoginInputVariablesType } from './queries'\n\n\ntype LoginFormPropsType = {\n    submitLogin: (values: LoginInputVariablesType) => Promise<void>,\n    submitting: boolean,\n    notification: NotificationPropsType | undefined\n}\n\n\nconst LoginForm: React.FC<LoginFormPropsType> = ({ submitting, submitLogin, notification }) => {\n\n\n    const initialValues = { username: '', password: '' }\n    const [showErrors, setShowErrors] = useState(false)\n    const [showPassword, setShowPassword] = useState(false)\n\n\n    const validationSchema = loginValidationSchema()\n\n\n    return (\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={(values) => submitLogin(values)}\n                validateOnChange={showErrors}\n                validateOnBlur={showErrors}\n            >\n                {({ values, handleChange, errors, handleSubmit }) => {\n                    return (\n                        <View style={styles.formContainer}>\n                            <View>\n                                <FormTextInput\n                                    target='username'\n                                    value={values.username}\n                                    handleValueChange={handleChange('username')}\n                                    isEditable={!submitting}\n                                    isVisible={true}\n                                    error={errors.username}\n                                />                       \n                                <FormTextInput\n                                    target='password'\n                                    value={values.password}\n                                    handleValueChange={handleChange('password')}\n                                    isEditable={!submitting}\n                                    isVisible={showPassword}\n                                    error={errors.password}\n                                />              \n                            </View>\n\n                            <View style={styles.iconButtonView}>\n                                <IconButton\n                                    icon={showPassword ? 'eye-off' : 'eye'}\n                                    color={theme.colors.primary.main}\n                                    onPress={() => setShowPassword(!showPassword)}\n                                />\n                            </View>\n\n                            <View style={styles.loginButtonView}>\n                                <Button \n                                    icon='send' \n                                    mode='contained' \n                                    onPress={() => {\n                                        if (!showErrors) setShowErrors(true)\n                                        handleSubmit()\n                                    }}\n                                    disabled={submitting || notification !== undefined}\n                                    color={theme.colors.primary.main}\n                                    testID='submit-login'\n                                >\n                                    LOGIN\n                                </Button>\n                            </View>\n                        </View>\n                    )\n                }}\n            </Formik>\n    )\n}\n\nexport default LoginForm\n\n","import * as Yup from 'yup'\nimport { LoginType } from '../../types/signup-login/LoginType'\n\nexport const loginValidationSchema = (): Yup.SchemaOf<LoginType> => {\n    return Yup.object({\n        username: Yup.string()\n            .min(3, 'Username must be at least 3 characters long')\n            .required('Required'),\n        password: Yup.string()\n            .min(8, 'Password must be at least 8 characters long')\n            .required('Required')\n    })\n}\n","import React from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { useHandleLogin } from './useHandleLogin'\nimport WaitSpinner from '../common-components/wait-spinner/WaitSpinner'\nimport Notification from '../common-components/notification/Notification'\nimport LoginWithFacebook from './LoginWithFacebook'\nimport MoveToPage from '../common-components/move-to-page/MoveToPage'\nimport LoginForm from './LoginForm'\nimport HeaderLogo from '../header/HeaderLogo'\n\n\n\ntype LoginPropsType = {\n    changePageToShow: (show: 'login' | 'signup') => void\n}\n\n\nconst Login: React.FC<LoginPropsType> = ({ changePageToShow }) => {\n\n    const { submitting, submitLogin, submitFacebookLogin, notification, setNotification } = useHandleLogin()\n\n\n    return (\n        <View style={styles.formContainer} testID='title-login'>\n            {notification !== undefined &&\n                <Notification  { ...notification }/>\n            }\n            <HeaderLogo/>\n            <Text style={styles.title}>LOGIN</Text>\n            <LoginForm\n                submitLogin={submitLogin}\n                submitting={submitting}\n                notification={notification}\n            />\n            <View style={styles.waitSpinnerContainer}>\n                {submitting ?\n                    <WaitSpinner/>\n                    :\n                    <LoginWithFacebook\n                        submitFacebookLogin={submitFacebookLogin}\n                        setNotification={setNotification}\n                        isDisabled={submitting || notification !== undefined}\n                    />\n                }\n            </View>\n\n            <MoveToPage\n                infoText='No account yet?'\n                moveAction={() => changePageToShow('signup')}\n                underlinedText='SIGN UP'\n            />\n\n        </View>\n    )\n}\n\nexport default Login\n\n","\n\n// axios query is the same as Apollo Client query except for the missing gql prior to ``\nexport const LOGIN_PERSON = `\n    mutation loginPerson($loginInput: LoginInput!) {\n        loginPerson(loginInput: $loginInput) {\n            code\n            success\n            message\n            id\n            username\n            facebookName\n            jwtToken\n        }\n    }\n`\n\n\nexport type LoginInputVariablesType = {\n    username: string,\n    password: string\n}\n\nexport type LoginPersonResponseType = {\n    loginPerson: {\n        code: string,\n        success: boolean,\n        message: string,\n        id: string | null,\n        username: string | null,\n        facebookName: null, \n        jwtToken: string | null,\n    }\n}\n\n\n// axios query is the same as Apollo Client query except for the gql prior to ``\nexport const LOGIN_PERSON_FACEBOOK = `\n    mutation facebookLogin($facebookLoginInput: FacebookLoginInput!) {\n        facebookLogin(facebookLoginInput: $facebookLoginInput) {\n            code\n            success\n            message\n            id\n            username\n            facebookName\n            jwtToken\n        }\n    }\n`\nexport type FacebookLoginInputVariablesType = {\n    userId: string, \n    facebookAccessToken: string\n}\n\nexport type FacebookLoginResponseType = {\n    facebookLogin: {\n        code: string,\n        success: boolean,\n        message: string,\n        id: string | null,\n        username: null\n        facebookName: string | null, \n        jwtToken: string | null \n    }\n}","import React, { useState } from 'react'\nimport SignUp from '../sign-up/SignUp'\nimport Login from '../login/Login'\n\n\nconst SignUpLogin = () => {\n\n\n    const [showing, setShowing] = useState<'login' | 'signup'>('login')\n    \n    const changePageToShow = (show: 'login' | 'signup') => {\n        setShowing(show)\n    }\n\n    if (showing === 'login') return <Login changePageToShow={changePageToShow}/>\n    else return <SignUp changePageToShow={changePageToShow}/>\n\n}\n\nexport default SignUpLogin\n\n\n","import { StyleSheet, Dimensions } from 'react-native'\n\n\n\n\nexport const styles = StyleSheet.create({\n\n\n\n    cameraView: {\n        backgroundColor: 'transparent',\n        width: Dimensions.get('window').width,\n        height: Dimensions.get('window').height,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n        alignItems: 'center'\n    },\n\n    cameraButtonsView: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n\n    previewImageView: {\n        backgroundColor: 'transparent',\n        width: Math.min(Dimensions.get('window').width, Dimensions.get('window').height),\n        height: Math.min(Dimensions.get('window').width, Dimensions.get('window').height),\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n    },    \n    previewButtonsView: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        // bottom: 20,\n        // position: 'absolute',\n        // left: '50%',\n        // right: '50%',\n    },\n    previewImageViewContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: Dimensions.get('window').height,\n        backgroundColor: '#000000',\n    }\n\n})\n","import React from 'react'\nimport { IconButton } from 'react-native-paper'\n\n\ntype ExpoCameraButtonPropsType = {\n    action: () => void,\n    type: 'flip' | 'snap' | 'cancel' | 'remove' | 'save'\n}\n\n\nconst ExpoCameraButton: React.FC<ExpoCameraButtonPropsType> = ({ action, type }) => {\n\n    const icons = {\n        flip: { name: 'camera-switch', color: '#FFFFFF', backgroundColor: '#000000' },\n        snap: { name: 'camera-enhance', color: '#FFFFFF', backgroundColor: '#000000' },\n        cancel: { name: 'keyboard-return', color: '#000000', backgroundColor: '#FFFFFF' },\n        remove: { name: 'delete-forever', color: '#000000', backgroundColor: '#FFFFFF' },\n        save: { name: 'content-save', color: '#000000', backgroundColor: '#FFFFFF' }\n    }\n\n    return (              \n        <IconButton\n            icon={icons[type].name}\n            color={icons[type].color}\n            size={40}\n            style={{ backgroundColor: icons[type].backgroundColor }}\n            onPress={action}\n        /> \n    )\n}\n\n\nexport default ExpoCameraButton\n\n\n","import React, { useState, useEffect } from 'react'\nimport { View, Text } from 'react-native'\nimport { Camera, CameraCapturedPicture } from 'expo-camera'\nimport WaitSpinner from '../common-components/wait-spinner/WaitSpinner'\nimport { styles } from './styles'\nimport ExpoCameraButton from './ExpoCameraButton'\n\n\ntype ExpoCameraPropsType = {\n    setPhoto: (photo: CameraCapturedPicture | undefined) => void,\n}\n\n\n\nconst ExpoCamera: React.FC<ExpoCameraPropsType> = ({ setPhoto }) => {\n\n    const [hasPermission, setHasPermission] = useState<boolean | undefined>(undefined)\n    const [type, setType] = useState(Camera.Constants.Type.front)\n    const [cameraRef, setCameraRef] = useState<Camera | null>(null)\n\n    useEffect(() => {\n        (async () => {\n          const { status } = await Camera.requestPermissionsAsync();\n          setHasPermission(status === 'granted')\n        })()\n    }, [])\n\n    if (hasPermission === undefined) {\n        return <WaitSpinner/>\n    }\n    \n    if (hasPermission === false) {\n        return <Text>No access to camera</Text>\n    }\n\n    const flipView = () => {\n        const newType = Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back\n        setType(newType)\n    }\n\n    const takePhoto = async () => {\n        if (cameraRef) {\n            let photo = await cameraRef.takePictureAsync()\n            console.log('photo', photo)\n            setPhoto(photo)\n        }\n    }\n\n  \n    return (\n            <Camera style={{ flex: 1 }} type={type} ref={ref => setCameraRef(ref)}>\n                <View style={styles.cameraView}>\n                    <View style={styles.cameraButtonsView}>\n                        <ExpoCameraButton\n                            action={flipView}\n                            type='flip'\n                        />\n                        <ExpoCameraButton\n                            action={takePhoto}\n                            type='snap'\n                        />\n                    </View>\n                </View>\n            </Camera>\n    )\n}\n\n\nexport default ExpoCamera\n\n\n","import React from 'react'\nimport { View, Image } from 'react-native'\nimport { CameraCapturedPicture } from 'expo-camera'\nimport { styles } from './styles'\nimport ExpoCameraButton from './ExpoCameraButton'\n\n\n\n\ntype PhotoPreviewViewProps = {\n    photo: CameraCapturedPicture,\n    declinePhoto: () => void,\n    cancelTakingPhoto: () => void,\n    savePhoto: () => void\n}\n\n\n\nconst PhotoPreviewView: React.FC<PhotoPreviewViewProps> = ({ photo, declinePhoto, cancelTakingPhoto, savePhoto }) => {\n\n    return (\n        <View style={styles.previewImageViewContainer}>\n            <Image\n                style={styles.previewImageView}\n                source={{ uri: photo.uri }}\n            /> \n            <View style={styles.previewButtonsView}>\n                <ExpoCameraButton\n                    action={declinePhoto}\n                    type='remove'\n                />\n                <ExpoCameraButton\n                    action={cancelTakingPhoto}\n                    type='cancel'\n                />\n                <ExpoCameraButton\n                    action={savePhoto}\n                    type='save'\n                />\n            </View>           \n        </View>\n    )\n\n}\n\n\nexport default PhotoPreviewView","import AppContext from '../../app-state/AppContext'\nimport { useContext } from 'react'\nimport axios from 'axios'\nimport { LOCALHOST_REST } from '@env'\nimport { CameraCapturedPicture } from 'expo-camera'\nimport { dataURLToBlob } from 'blob-util'\nimport { UploadedImageType } from '../../types/item/UploadedImageType'\n\n\ntype UseSavePhotoType = {\n    uploadPhoto: (photo: CameraCapturedPicture) => Promise<UploadedImageType | undefined>,\n}\n\ntype UploadImageServerResponseType = {\n    public_id: string,\n    secure_url: string    \n}\n\n\n\nexport const useUploadPhoto = (): UseSavePhotoType => {\n\n    const { state } = useContext(AppContext)\n    const loggedInUser = state.loggedInUser\n\n    const uploadPhoto = async (photo: CameraCapturedPicture): Promise<UploadedImageType | undefined> => {\n        if (loggedInUser && loggedInUser.jwtToken) {\n            const formData = new FormData()\n            if (photo && photo.uri) {\n                const photoBlob = dataURLToBlob(photo.uri)\n                formData.append('image', photoBlob)\n            }\n            const configurations = {\n                headers: {\n                    'authorization': loggedInUser.jwtToken,\n                    'content-type': 'multipart/form-data'\n                }\n            }\n            try {\n                const uploadImageResponse = await axios.post(LOCALHOST_REST, formData, configurations)\n                const uploadedImageData = parseUploadServerResponseData(uploadImageResponse.data)\n                return { ...uploadedImageData, clientUrl: photo.uri }\n            } catch (error) {\n                console.log('error', error)\n            }\n        }\n        return undefined\n    }\n\n\n    return {\n        uploadPhoto,\n    }\n\n}\n\n\nconst parseUploadServerResponseData = (responseData: unknown): UploadedImageType  => {\n    const data = responseData as UploadImageServerResponseType\n    return {\n        publicId: parseText(data.public_id, 'Uploaded image public id'),\n        secureUrl: parseText(data.secure_url, 'Uploaded image secure url'), \n        clientUrl: undefined\n    }\n}\n\n\nconst parseText = (text: unknown, target: string): string => {\n    if (!text || !isString(text)) throw new Error(`When present, ${target} must be string.`)\n    return text\n}\n\n\nconst isString = (text: unknown): text is string => {\n    return typeof text === 'string' || text instanceof String\n}","\nexport enum PriceGroupEnum {\n    GROUP_1 = '0-50',\n    GROUP_2 = '50-250',\n    GROUP_3 = '>250'\n}\n\n\nexport const priceGroups = [\n    { groupEnum: PriceGroupEnum.GROUP_1, text: '0 - 50 €' },\n    { groupEnum: PriceGroupEnum.GROUP_2, text: '50 - 250 €' },\n    { groupEnum: PriceGroupEnum.GROUP_3, text: '> 250 €' },\n]","import { makeVar } from '@apollo/client'\nimport { MatchToHandleType } from '../types/match/MatchToHandleType'\nimport { UploadedImageType } from '../types/item/UploadedImageType'\nimport { SelectedItemMatchType } from '../types/match/SelectedItemMatchType'\n\n\nexport const itemUnderConstructionImageVar = makeVar<UploadedImageType | undefined>(undefined)\nexport const matchToHandleVar = makeVar<MatchToHandleType | undefined>(undefined)\nexport const selectedMatchVar = makeVar<SelectedItemMatchType | undefined>(undefined)\n\n\nexport default {\n    matchToHandleVar,\n    selectedMatchVar\n}\n","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport { UploadedImageType } from '../../types/item/UploadedImageType'\nimport { CameraCapturedPicture } from 'expo-camera'\nimport ExpoCamera from './ExpoCamera'\nimport PhotoPreviewView from './PhotoPreviewView'\nimport { useUploadPhoto } from './useUploadPhoto'\nimport { useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropAddType } from '../../types/routes/CompositeNavigationPropTypes'\nimport { itemUnderConstructionImageVar } from '../../apollo/cache'\n\n\n\nconst ImagingScreen = () => {\n    \n    const navigation = useNavigation<CompositeNavigationPropAddType>()\n    const [image, setImage] = useState<CameraCapturedPicture | undefined>(undefined)\n    const { uploadPhoto } = useUploadPhoto()\n\n    const setUploadedImage = (uploadedImage: UploadedImageType): void => {\n        itemUnderConstructionImageVar(uploadedImage)\n        navigation.navigate('Add')\n    }\n    const cancel = () => {\n        navigation.navigate('Add')\n    }\n    const savePhoto = async () => {\n        if (image && image.uri) {\n            const uploadedImage = await uploadPhoto(image)\n            if (uploadedImage) {\n                setUploadedImage(uploadedImage)\n            }\n        }\n    }\n    \n    return (\n        <View>\n            {image ?\n                <PhotoPreviewView \n                    photo={image} \n                    declinePhoto={() => setImage(undefined)} \n                    cancelTakingPhoto={cancel} \n                    savePhoto={savePhoto}\n                />\n                :\n                <ExpoCamera \n                    setPhoto={setImage}\n                />\n            }\n        </View>\n    )\n}\n\n\nexport default ImagingScreen\n\n\n","import { StyleSheet, Dimensions } from 'react-native'\nimport { theme } from '../../theme/theme'\n\nconst IMAGE_HEIGHT = 100\nconst SPACING = 5\n\n\n\nexport const styles = StyleSheet.create({\n\n    homeScreen: {\n        height: Dimensions.get('screen').height - 50,\n        bottom: 0,\n    },\n    pageTitle: {\n        marginTop: 60,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        marginBottom: 5,\n    },\n    subtitle: {\n        marginTop: 20,\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    infoText: {\n        textAlign: 'center'\n    },\n    myItemsContainer: {\n        marginLeft: 10,\n        marginTop: 10,\n        marginRight: 10,\n        flex: 1,\n        flexGrow: 1,\n    },\n    myItemButtonContainer: {\n        backgroundColor: theme.colors.primary.dark,\n        borderRadius: 6,\n        // marginTop: SPACING,\n        padding: SPACING,\n        // paddingLeft: SPACING,\n        // paddingBottom: SPACING,\n        flexDirection: 'row',\n        // alignContent: 'space-between',\n        justifyContent: 'space-between',\n    },\n    itemImageButton: {\n        backgroundColor: theme.colors.primary.dark,\n        width: IMAGE_HEIGHT,\n        height: IMAGE_HEIGHT\n    },\n    imageView: {\n        width: IMAGE_HEIGHT,\n        height: IMAGE_HEIGHT,\n        borderRadius: 8,\n    },\n    iconView: {\n        backgroundColor: theme.colors.primary.dark,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center' \n    },\n    itemDetailsContainer: {\n        flexDirection: 'column',\n        alignContent: 'flex-start',\n        marginLeft: 12,\n\n    },\n    myItemTitle: {\n        fontWeight: 'bold',\n        marginBottom: 8,\n        color: theme.colors.primary.contrast,\n    },\n    myItemTitleDelete: {\n        fontWeight: 'bold',\n        marginBottom: 2,\n        color: '#FFFFFF',\n    },\n    matchText: {\n        fontWeight: 'bold',\n        color: theme.colors.primary.contrast,\n    },\n    text: {\n        color: theme.colors.primary.contrast,\n    },\n    scrollView: {\n        marginTop: 10,\n        flex: 1,\n        flexGrow: 1,\n    },\n    deleteButtonContainer: {\n        // height: IMAGE_HEIGHT,\n        width: 85,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        // backgroundColor: 'orange',\n    },\n    deleteIconsContainer: {\n        borderRadius: 6,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: theme.colors.primary.light,\n        padding: 10,\n    },\n    deleteButton: {\n        height: 40,\n        width: 40,\n        backgroundColor: theme.colors.error,  \n        borderRadius: 6\n    },\n\n    deleteView: {\n        backgroundColor: theme.colors.error,\n        position: 'absolute',\n        borderRadius: 6,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        // alignItems: 'center',\n        width: '100%',\n        height: '100%',\n        padding: SPACING,\n    },\n    deleteIconContainer: {\n        borderRadius: 30,\n        height: 30,\n        width: 30,\n        margin: 5,\n    }\n\n})\n\n\n","import { gql } from '@apollo/client'\nimport { ItemType } from '../../types/item/ItemType'\n\n\n\ntype MyItemResponseType = \n    ItemType & {\n        matchedTo: ItemType[],\n        matchedFrom: ItemType[]\n    }\n\n\nexport type MyItemsResponseType = {\n    myItems: MyItemResponseType[]\n}\n\nexport const MY_ITEMS = gql`\n    query myItems {\n        myItems {\n            id\n            title\n            priceGroup\n            description\n            brand\n            imagePublicId\n            imageSecureUrl\n            matchedTo {\n                id\n                title\n                priceGroup\n                description\n                brand\n                imagePublicId\n                imageSecureUrl\n            }\n            matchedFrom {\n                id\n                title\n                priceGroup\n                description\n                brand\n                imagePublicId\n                imageSecureUrl\n            }\n        }\n    }\n`\n\n\n","import React from 'react'\nimport { View, Image, Text, TouchableOpacity } from 'react-native'\nimport { styles } from './styles'\nimport { MyItemType } from '../../types/item/MyItemType'\n// import { IconButton } from 'react-native-paper'\nimport MIcon from 'react-native-vector-icons/MaterialCommunityIcons'\nimport { theme } from '../../theme/theme'\n// import { CheckBox } from 'react-native-elements'\nimport CheckBox from 'react-native-elements/dist/checkbox/CheckBox'\nimport IconButton from 'react-native-paper/src/components/IconButton'\n\n\n\ntype DeleteViewPropsType = {\n    displayTitle: string,\n    myItem: MyItemType,\n    isConfirmed: boolean,\n    setIsConfirmed: (newValue: boolean) => void\n    cancelShowDeleteView: () => void\n}\n\n\n\n\nconst DeleteView: React.FC<DeleteViewPropsType> = ({ displayTitle, myItem, cancelShowDeleteView, isConfirmed, setIsConfirmed }) => {\n\n\n\n    return (\n \n\n                <View style={styles.deleteView}>\n                    {myItem.imageSecureUrl ?\n                            <Image\n                                source={{ uri: myItem.imageSecureUrl }}\n                                style={styles.imageView}\n                            />\n                            :\n                            <View style={[styles.imageView, styles.iconView]}>\n                                <IconButton\n                                    icon='image-edit'\n                                    color='#FFFFFF'\n                                    size={90}\n                                    style={styles.itemImageButton}\n                                    disabled={true}\n                                />  \n                            </View>\n                        }\n                        <View style={styles.itemDetailsContainer}>\n                            <Text style={styles.myItemTitleDelete}>DELETE ITEM</Text>\n                            <Text style={styles.myItemTitleDelete}>{displayTitle.toLocaleUpperCase()}</Text>\n                            <Text style={styles.text}>All the data related to this item</Text>\n                            <Text style={styles.text}>will be permanently removed.</Text>\n                            \n                            <CheckBox\n                                // center\n                                title='I want to proceed.'\n                                checked={isConfirmed}\n                                onPress={() => setIsConfirmed(!isConfirmed)}\n                                checkedColor='#FFFFFF'\n                                textStyle={{ fontWeight: 'normal', color: '#FFFFFF' }}\n                                containerStyle={{ backgroundColor: 'transparent', borderWidth: 0, marginLeft: -10, marginTop: -8 }}\n                            />\n                        </View>\n                        <View style={styles.deleteButtonContainer}>\n                            <TouchableOpacity style={styles.deleteIconContainer} onPress={cancelShowDeleteView}>\n                                <MIcon name='keyboard-return' size={35} color='#FFFFFF' />  \n                            </TouchableOpacity>\n                            <TouchableOpacity style={styles.deleteIconContainer} onPress={() => console.log('deletoi')}>\n                                <MIcon name='delete-forever' size={35} color={isConfirmed ? '#FFFFFF' : theme.colors.primary.light} />  \n                            </TouchableOpacity>\n                            \n                        </View>       \n                </View>\n    )\n}\n\nexport default DeleteView","import React, { useState } from 'react'\nimport { View, Image, Text, TouchableOpacity, Animated, Dimensions } from 'react-native'\nimport { styles } from './styles'\nimport { MyItemType } from '../../types/item/MyItemType'\n// import { IconButton } from 'react-native-paper'\nimport IconButton from 'react-native-paper/src/components/IconButton'\n// import { matchToHandleVar, selectedMatchVar } from '../../apollo/cache'\nimport reactiveVars from '../../apollo/cache'\nimport { useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropMatchType } from '../../types/routes/CompositeNavigationPropTypes'\nimport { useRef } from 'react'\nimport { getMatchedData } from './getMatchedData'\nimport MIcon from 'react-native-vector-icons/MaterialCommunityIcons'\nimport { theme } from '../../theme/theme'\nimport { getPanResponder } from './getPanResponder'\nimport DeleteView from './DeleteView'\n\n// import useNavigation from '@react-navigation/core/src/useNavigation'\n\n\nconst SCREEN_WIDTH = Dimensions.get('window').width\nconst SWIPE_RELEASE_TRESHOLD = SCREEN_WIDTH * 0.35\n\n\ntype MyItemButtonPropsType = {\n    myItem: MyItemType\n}\n\n\n\n\nconst MyItemButton: React.FC<MyItemButtonPropsType> = ({ myItem }) => {\n\n    const [showingDelete, setShowingDelete] = useState(false)\n    const [isConfirmed, setIsConfirmed] = useState(false)\n    const navigation = useNavigation<CompositeNavigationPropMatchType>()  \n    const { selectedMatchVar, matchToHandleVar } = reactiveVars\n\n    const position = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current\n    \n    const panResponder = getPanResponder(position, SWIPE_RELEASE_TRESHOLD, SCREEN_WIDTH, setShowingDelete)\n\n    const cancelShowDeleteView = () => {\n        const animation = Animated.timing(position, {\n            toValue: 0,\n            useNativeDriver: true,\n            duration: 500\n        })\n        animation.start(() => {\n            setShowingDelete(false)\n            setIsConfirmed(false)\n        })  \n    }\n\n\n    const { matches, matchedFrom, matchedTo } = getMatchedData(myItem)\n    \n\n    const handleMyItemButtonPressed = () => {\n        selectedMatchVar(undefined)\n        matchToHandleVar({\n            mode: 'MY',\n            item: {\n                id: myItem.id,\n                title: myItem.title,\n                imageSecureUrl: myItem.imageSecureUrl ?? '',\n            },\n            matches: matches,\n            matchedFrom: matchedFrom,\n            matchedTo: matchedTo,\n        })\n        navigation.navigate('Match')\n    }\n\n\n\n\n\n    const displayTitle = myItem.title.length > 25 ? myItem.title.substring(0, 25) + '...' : myItem.title\n\n    return (\n        <TouchableOpacity \n            onPress={handleMyItemButtonPressed} \n            style={{ marginBottom: 5 }} \n            disabled={showingDelete}\n            testID={`my-item-${myItem.id}`}\n        >\n            <View>     \n\n                <DeleteView\n                        displayTitle={displayTitle}\n                        myItem={myItem}\n                        isConfirmed={isConfirmed}\n                        setIsConfirmed={setIsConfirmed}\n                        cancelShowDeleteView={cancelShowDeleteView}\n                />\n\n                <Animated.View \n                    style={{ transform: [{ translateX: position.x }]}}\n                    { ...panResponder.panHandlers }\n                >\n                    <View style={styles.myItemButtonContainer} >\n                        {myItem.imageSecureUrl ?\n                            <Image\n                                source={{ uri: myItem.imageSecureUrl }}\n                                style={styles.imageView}\n                            />\n                            :\n                            <View style={[styles.imageView, styles.iconView]}>\n                                <IconButton\n                                    icon='image-edit'\n                                    color='#FFFFFF'\n                                    size={90}\n                                    style={styles.itemImageButton}\n                                    disabled={true}\n                                />  \n                            </View>\n                        }\n                        <View style={styles.itemDetailsContainer}>\n                            <Text style={styles.myItemTitle}>{displayTitle.toLocaleUpperCase()}</Text>\n                            <Text style={styles.matchText}>{`${matches.length}    ${matches.length === 1 ? 'MATCH' : 'MATCHES'}`}</Text>\n                            <Text style={styles.text}>{`${matchedFrom.length}    ${matchedFrom.length === 1 ? 'request': 'requests'} by others`}</Text>\n                            <Text style={styles.text}>{`${matchedTo.length}    ${matchedTo.length === 1 ? 'proposal': 'proposals'} by me`}</Text>\n                        </View>\n                        <View style={styles.deleteButtonContainer}>\n                            <MIcon name='delete-sweep' size={35} color={theme.colors.primary.contrast} />   \n                        </View>\n                    </View>\n                </Animated.View>  \n\n            </View>\n            \n\n        </TouchableOpacity>\n\n    )\n}\n\nexport default MyItemButton","import { useRef } from 'react'\nimport { PanResponderInstance } from 'react-native'\nimport { PanResponder, Animated } from 'react-native'\n\n\n\nexport const getPanResponder = (position: Animated.ValueXY, SWIPE_RELEASE_TRESHOLD: number, SCREEN_WIDTH: number, setShowingDelete: (newState: boolean) => void): PanResponderInstance => {\n    const panResponder = useRef(\n        PanResponder.create({\n            onStartShouldSetPanResponder: (_event, _gestureState) => true,\n            onPanResponderMove: (_event, gestureState) => {\n                position.setValue({ x: gestureState.dx, y: 0 })\n            },\n            onPanResponderRelease: (_event, gestureState) => {\n                if (-gestureState.dx > SWIPE_RELEASE_TRESHOLD) {\n                    const animation = Animated.timing(position, {\n                        toValue: -SCREEN_WIDTH,\n                        useNativeDriver: true,\n                        duration: 300\n                    })\n                    animation.start(() => {\n                        setShowingDelete(true)\n                    })                  \n                } else {\n                    const animation = Animated.timing(position, {\n                        toValue: 0,\n                        useNativeDriver: true,\n                        duration: 300\n                    })\n                    animation.start()\n                }\n            }\n        })\n    ).current\n    return panResponder\n}","import { MyItemType } from '../../types/item/MyItemType'\n\n\n\n\nexport const getMatchedData = (myItem: MyItemType) => {\n\n    const matches: { id: string, title: string, imageSecureUrl: string }[] = []\n    const matchedFrom:  { id: string, title: string, imageSecureUrl: string }[] = []\n    const matchedTo:  { id: string, title: string, imageSecureUrl: string }[] = []    \n\n    myItem.matchedFrom.forEach(itemMatchedFrom => {\n        let isMatched = false\n        const itemFrom = { id: itemMatchedFrom.id,  title:  itemMatchedFrom.title, imageSecureUrl:  itemMatchedFrom.imageSecureUrl ?? '' }\n        myItem.matchedTo.forEach(itemMatchedTo => {\n            if (itemMatchedFrom.id === itemMatchedTo.id) {\n                matches.push(itemFrom)\n                isMatched = true\n            }\n        })\n        if (!isMatched) {\n            matchedFrom.push(itemFrom)\n        }\n    })\n\n    myItem.matchedTo.forEach(itemMatchedTo => {\n        const isNotAMatch = matches.every(matchedItem => matchedItem.id !== itemMatchedTo.id)\n        if (isNotAMatch) {\n            matchedTo.push({ id: itemMatchedTo.id,  title:  itemMatchedTo.title, imageSecureUrl:  itemMatchedTo.imageSecureUrl ?? '' })\n        }\n    })\n\n    return {\n        matches,\n        matchedFrom,\n        matchedTo\n    }\n\n}","import React, { useState } from 'react'\nimport { View, Text, ScrollView } from 'react-native'\nimport { styles } from './styles'\nimport { MY_ITEMS, MyItemsResponseType } from './queries'\nimport { useQuery } from '@apollo/client' \nimport WaitSpinner from '../common-components/wait-spinner/WaitSpinner'\nimport Notification from '../common-components/notification/Notification'\nimport MyItemButton from './MyItemButton'\n\n\n\nconst Home = () => {\n\n    const { loading, error, data } = useQuery<MyItemsResponseType>(MY_ITEMS)\n    const [showErrorNotification, setShowErrorNotification] = useState(false)\n\n\n    if (loading) return <WaitSpinner/>\n\n    if (error || !data) {\n        setShowErrorNotification(true)\n        return (\n            <View testID='home-page'>\n                {showErrorNotification &&\n                    <Notification\n                        title='ERROR'\n                        content='Something went wrong. Could not fetch items data.'\n                        themeType='error'\n                        clearNotification={() => setShowErrorNotification(false)}\n                    />\n                }\n            </View>\n        )\n    }\n\n\n\n    return (\n        <View style={styles.homeScreen} testID='home-page'>\n            <View style={styles.myItemsContainer}>\n                <Text style={styles.pageTitle} testID='title-my-items'>MY ITEMS</Text>\n                {data.myItems.length > 4 && <Text style={styles.infoText}>Scroll down to view all items.</Text>}\n                {data.myItems.length > 0 && <Text style={styles.infoText}>Tap an item button to view item details.</Text>}\n                {data.myItems.length > 0 ?\n                    <View style={styles.scrollView}>\n                        <ScrollView testID='my-items-scroll-view'>\n                            {data.myItems.map(myItem => <MyItemButton key={myItem.id} myItem={myItem}/>)}\n                        </ScrollView>\n                    </View>\n                    :\n                    <Text style={styles.infoText}>There are no items yet.</Text>\n                }       \n            </View>\n        </View>\n    )\n}\n\n\nexport default Home\n\n","import { Dimensions } from 'react-native'\n\nexport const SCREEN_WIDTH = Dimensions.get('window').width\nexport const SCREEN_HEIGHT = Dimensions.get('window').height\nexport const SWIPE_OUT_DURATION = 250\nexport const SWIPE_LEFT_TRESHOLD = SCREEN_WIDTH * 0.3\nexport const CARD_WIDTH = SCREEN_WIDTH * 0.8\nexport const CARD_HEIGHT = SCREEN_HEIGHT * 0.65\nexport const SPACING = 10\n\nexport const MIDDLE_CARD_ORIGO = { \n    x: (SCREEN_WIDTH - CARD_WIDTH) / 2,\n    y: 0\n}\nexport const LEFT_CARD_ORIGO = { \n    x: MIDDLE_CARD_ORIGO.x - CARD_WIDTH - SPACING,\n    y: 0\n}\nexport const LEFTMOST_CARD_ORIGO = { \n    x: MIDDLE_CARD_ORIGO.x - 2 * (CARD_WIDTH + SPACING),\n    y: 0\n}\nexport const RIGHT_CARD_ORIGO = { \n    x: MIDDLE_CARD_ORIGO.x + CARD_WIDTH + SPACING,\n    y: 0\n}\nexport const RIGHTMOST_CARD_ORIGO = { \n    x: MIDDLE_CARD_ORIGO.x + 2 * (CARD_WIDTH + SPACING),\n    y: 0\n}\n\n","import { StyleSheet } from 'react-native'\nimport { theme } from '../../theme/theme'\nimport { Dimensions } from 'react-native'\nimport { CARD_HEIGHT } from '../carousel/carouselConstants'\n\n\nexport const styles = StyleSheet.create({\n    browseContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    pageTitle: {\n        marginTop: 60,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    pickPriceGroupsButtonsContainer: {\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n        marginTop: 5,\n    },\n\n    pickButton: {\n        marginRight: 5, \n        borderColor: theme.colors.primary.light, \n        borderWidth: 1\n    },\n    subtitle: {\n        marginTop: 10,\n        fontSize: 20,\n        fontWeight: 'bold',\n        // textAlign: 'center'\n    },\n    paleText: {\n        color: theme.colors.primary.veryLight, \n    },\n    priceGroupTitle: {\n        marginTop: 8,\n        fontWeight: 'bold',\n        // marginBottom: -5\n    },\n    groupTitle: {\n        marginTop: 8,\n        fontWeight: 'bold',\n        marginBottom: -10\n    },\n    searchCriteriaContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 20,\n    },\n    star: {\n        fontWeight: 'bold',\n        marginRight: 5,\n    },\n    rowContainer: {\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n        marginTop: 8\n    },\n    submitButtonContainer: {\n        marginTop: 10,\n        width: Dimensions.get('window').width * 0.8\n    },\n    cancelButtonContainer: {\n        marginTop: 10,\n        width: Dimensions.get('window').width * 0.4\n    },\n    fetchMoreContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 10 + CARD_HEIGHT,\n    },\n    noItemsText: {\n        // marginTop: 10,\n        fontWeight: 'bold'\n    },\n    noItemsContainer: {\n        marginTop: 20,\n    }\n\n})\n","import React from 'react'\nimport { View } from 'react-native'\nimport { Button } from 'react-native-paper'\nimport { theme } from '../../theme/theme'\nimport { styles } from './styles'\nimport { PriceGroupEnum, priceGroups } from '../../types/item/PriceGroupEnum'\n\n\n\n\ntype PickPriceGroupsButtonsPropsType = {\n    selectedPriceGroups: PriceGroupEnum[], \n    priceGroupSelectionChanged: (group: PriceGroupEnum) => void,\n    disabled: boolean\n}\n\n\nconst PickPriceGroupsButtons: React.FC<PickPriceGroupsButtonsPropsType> = ({ selectedPriceGroups, priceGroupSelectionChanged, disabled }) => {\n\n\n    const isSelectedColor = theme.colors.primary.main\n    const isNotSelectedColor = '#efebe9'\n\n    return (\n\n        <View style={styles.pickPriceGroupsButtonsContainer}>\n            {priceGroups.map(group => {\n                return (\n                    <Button \n                        key={group.text + 'pick-button'}\n                        mode='contained' \n                        onPress={() => priceGroupSelectionChanged(group.groupEnum)}\n                        disabled={disabled}\n                        color={selectedPriceGroups.includes(group.groupEnum) ? isSelectedColor : isNotSelectedColor}\n                        style={styles.pickButton}\n                    >\n                        {group.text}\n                    </Button>\n                )\n            })}\n\n        </View>\n\n    )\n}\n\nexport default PickPriceGroupsButtons\n","import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { PriceGroupEnum } from '../../types/item/PriceGroupEnum'\nimport { styles } from './styles'\nimport { SearchTermsType } from '../../types/browse/SearchTermsType'\nimport PickPriceGroupsButtons from './PickPriceGroupsButtons'\nimport FormTextInput from '../common-components/form-text-input/FormTextInput'\nimport { Button } from 'react-native-paper'\nimport { theme } from '../../theme/theme'\n\n\ntype BrowseSearchTermsPropsType = {\n    searchTerms: SearchTermsType | undefined\n    searchCriteriaChanged: (newSearchTerms: SearchTermsType) => void,\n    setShowSetSearchCriteria: (newValue: boolean) => void,\n}\n\n\n\nconst BrowseSearchTerms: React.FC<BrowseSearchTermsPropsType> = ({ searchTerms, searchCriteriaChanged, setShowSetSearchCriteria }) => {\n\n    const [selectedPriceGroups, setSelectedPriceGroups] = useState<PriceGroupEnum[]>(searchTerms && searchTerms.priceGroups ? searchTerms.priceGroups : [])\n    const [titlePhrases, setTitlePhrases] = useState<string>(searchTerms && searchTerms.phrasesInTitle ? searchTerms.phrasesInTitle.join(',') : '')\n    const [descriptionPhrases, setDescriptionPhrases] = useState<string>(searchTerms && searchTerms.phrasesInDescription ? searchTerms.phrasesInDescription.join(',') : '')\n    const [brands, setBrands] = useState<string>(searchTerms && searchTerms.brands ? searchTerms.brands.join(',') : '')\n\n    const priceGroupSelectionChanged = (group: PriceGroupEnum) => {\n        if (selectedPriceGroups.includes(group)) {\n            setSelectedPriceGroups(selectedPriceGroups.filter(selectedGroup => selectedGroup !== group))\n        } else setSelectedPriceGroups([...selectedPriceGroups, group])\n    }\n\n    const submitSearchTerms = () => {\n        let seachCriteria: SearchTermsType = {}\n        if (selectedPriceGroups.length > 0) seachCriteria = { priceGroups: selectedPriceGroups }\n        if (titlePhrases !== '') seachCriteria = { ...seachCriteria, phrasesInTitle: titlePhrases.split(',').map(word => word.trim()) }\n        if (descriptionPhrases !== '') seachCriteria = { ...seachCriteria, phrasesInDescription: descriptionPhrases.split(',').map(word => word.trim()) }\n        if (brands !== '') seachCriteria = { ...seachCriteria, brands: brands.split(',').map(word => word.trim()) }\n        searchCriteriaChanged(seachCriteria)\n    }\n\n    const clearAllCriteria = () => {\n        setSelectedPriceGroups([])\n        setTitlePhrases('')\n        setDescriptionPhrases('')\n        setBrands('')\n    }\n\n    return (\n        <View style={styles.searchCriteriaContainer}>\n            <View>\n                <Text style={styles.subtitle}>SET SEARCH CRITERIA</Text>\n                <Text style={styles.paleText}>No criteria? Just hit the SEARCH button.</Text>\n            </View>\n\n\n            <View>\n                <Text  style={styles.priceGroupTitle}>PRICE GROUP</Text>\n                <Text style={styles.paleText}>How valuable items would you like to view?</Text>\n                <Text style={styles.paleText}>Pick any combination of price groups you like.</Text>\n                <PickPriceGroupsButtons\n                    selectedPriceGroups={selectedPriceGroups}\n                    priceGroupSelectionChanged={priceGroupSelectionChanged}\n                    disabled={false}\n                />\n\n                <Text style={styles.groupTitle}>TITLE *</Text>\n                <FormTextInput\n                        target='searchTitle'\n                        value={titlePhrases}\n                        handleValueChange={text => setTitlePhrases(text)}\n                        isEditable={true}\n                        isVisible={true}\n                />\n\n                <Text style={styles.groupTitle}>DESCRIPTION *</Text>\n                <FormTextInput\n                        target='searchDescription'\n                        value={descriptionPhrases}\n                        handleValueChange={text => setDescriptionPhrases(text)}\n                        isEditable={true}\n                        isVisible={true}\n                />\n\n                <Text style={styles.groupTitle}>BRAND *</Text>\n                <FormTextInput\n                        target='searchBrand'\n                        value={brands}\n                        handleValueChange={text => setBrands(text)}\n                        isEditable={true}\n                        isVisible={true}\n                />\n\n                <View style={styles.rowContainer}>\n                    <Text style={[styles.star, styles.paleText]} >*</Text>\n                    <View>\n                        <Text style={styles.paleText}>List comma-separated search terms as input.</Text>\n                        <Text style={styles.paleText}>The search will return items that contain at least </Text>\n                        <Text style={styles.paleText}>one of the search terms present in each of the</Text>\n                        <Text style={styles.paleText}>lists you specify.</Text>\n                    </View>\n                </View>\n                \n                <View style={styles.submitButtonContainer}>\n                    <Button \n                        icon='text-box-search-outline' \n                        mode='contained' \n                        onPress={submitSearchTerms}\n                        disabled={false}\n                        color={theme.colors.primary.main}\n                        >\n                            SEARCH\n                    </Button> \n                </View>\n\n                {(selectedPriceGroups.length > 0 || titlePhrases !== '' || descriptionPhrases !== '' || brands !== '') &&\n                    <View style={styles.submitButtonContainer}>\n                        <Button \n                            icon='delete-forever' \n                            mode='contained' \n                            onPress={clearAllCriteria}\n                            disabled={false}\n                            color={theme.colors.primary.main}\n                            >\n                                CLEAR ALL\n                        </Button> \n                    </View>                    \n                }\n\n\n            </View>\n            {searchTerms !== undefined &&\n                    <View style={styles.cancelButtonContainer}>\n                        <Button \n                            icon='keyboard-return' \n                            mode='contained' \n                            onPress={() => setShowSetSearchCriteria(false)}\n                            disabled={false}\n                            color={theme.colors.primary.light}\n                        >\n                            CANCEL\n                        </Button> \n                    </View>\n                }\n        </View>\n    )\n}\n\nexport default BrowseSearchTerms\n\n","import { gql } from '@apollo/client'\n\n\nexport const BROWSE_ITEMS_BY_PAGE = gql`\n    query browseItemsByPage($browseItemsByPageInput: BrowseItemsByPageInput!) {\n        browseItemsByPage(browseItemsByPageInput: $browseItemsByPageInput) {\n            edges {\n                cursor\n                node {\n                    id\n                    title\n                    priceGroup\n                    description\n                    brand\n                    imagePublicId\n                    imageSecureUrl                    \n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n`\n\n\n\nexport const MY_ITEMS_FOR_CAROUSEL = gql`\n            query MyItemsInCache {\n                myItems {\n                    id\n                    priceGroup\n                    imageSecureUrl\n                    matchedTo {\n                        id\n                    }\n                    matchedFrom {\n                        id\n                    }\n                }\n            }\n        `\n\nexport type MyItemsForCarouselType = {\n    myItems: {\n        id: string,\n        title: string,\n        priceGroup: string,\n        imageSecureUrl: string,\n        matchedTo: {\n            id: string,\n        }[],\n        matchedFrom: {\n            id: string,\n        }[],\n    }[]\n}\n\nexport const MY_ITEMS_IN_CACHE = gql`\n            query MyItemsInCache {\n                myItems {\n                    id\n                    title\n                    priceGroup\n                    imageSecureUrl\n                }\n            }\n        `\n\n","import { PanResponderGestureState } from 'react-native'\nimport { CardOrigosType } from '../Carousel'\nimport { MIDDLE_CARD_ORIGO, LEFT_CARD_ORIGO, RIGHT_CARD_ORIGO, LEFTMOST_CARD_ORIGO, RIGHTMOST_CARD_ORIGO } from '../carouselConstants'\n\n\nexport const performSetCardOrigoValues = (gestureState: PanResponderGestureState, cardOrigos: CardOrigosType) => {\n    cardOrigos.middle.setValue({ x: MIDDLE_CARD_ORIGO.x + gestureState.dx, y: MIDDLE_CARD_ORIGO.y + gestureState.dy })\n    cardOrigos.left.setValue({ x: LEFT_CARD_ORIGO.x + gestureState.dx, y: LEFT_CARD_ORIGO.y + gestureState.dy })\n    cardOrigos.right.setValue({ x: RIGHT_CARD_ORIGO.x + gestureState.dx, y: RIGHT_CARD_ORIGO.y + gestureState.dy })\n    cardOrigos.leftmost.setValue({ x: LEFTMOST_CARD_ORIGO.x + gestureState.dx, y: LEFTMOST_CARD_ORIGO.y + gestureState.dy })\n    cardOrigos.rightmost.setValue({ x: RIGHTMOST_CARD_ORIGO.x + gestureState.dx, y: RIGHTMOST_CARD_ORIGO.y + gestureState.dy })\n}","import { Animated } from 'react-native'\nimport { CardOrigosType } from '../Carousel'\nimport { MIDDLE_CARD_ORIGO, LEFT_CARD_ORIGO, RIGHT_CARD_ORIGO, LEFTMOST_CARD_ORIGO, RIGHTMOST_CARD_ORIGO } from '../carouselConstants'\n    \n\nexport const returnCardsToStartPosition = (cardOrigos: CardOrigosType) => {\n\n    const targetValuesForOrigos = [\n        { origoName: 'middle', targetValue: MIDDLE_CARD_ORIGO },\n        { origoName: 'left', targetValue: LEFT_CARD_ORIGO },\n        { origoName: 'right', targetValue: RIGHT_CARD_ORIGO },\n        { origoName: 'leftmost', targetValue: LEFTMOST_CARD_ORIGO },\n        { origoName: 'rightmost', targetValue: RIGHTMOST_CARD_ORIGO },\n    ]\n\n    const origos = cardOrigos as Record<string, Animated.ValueXY>\n\n    const animations = targetValuesForOrigos.map(({ origoName, targetValue }) => {\n        return Animated.spring(origos[origoName], {\n            toValue: { ...targetValue },\n            useNativeDriver: true\n        })\n    })\n\n    Animated.parallel(animations).start()\n\n    }","import { Animated } from 'react-native'\nimport { CardOrigosType } from '../Carousel'\nimport { LEFT_CARD_ORIGO, SWIPE_OUT_DURATION, LEFTMOST_CARD_ORIGO, MIDDLE_CARD_ORIGO, \n    SCREEN_WIDTH, RIGHT_CARD_ORIGO, RIGHTMOST_CARD_ORIGO } from '../carouselConstants'\n\n\n\nexport const swipeCardOut = (cardOrigos: CardOrigosType, direction: 'left' | 'right', updateCards: (direction: 'left' | 'right') => void) => {\n\n        const targetValues = [\n            { origoName: 'middle', targetValue: direction === 'left' ? LEFT_CARD_ORIGO : RIGHT_CARD_ORIGO },\n            { origoName: 'left', targetValue: direction === 'left' ? LEFTMOST_CARD_ORIGO: MIDDLE_CARD_ORIGO },\n            { origoName: 'right', targetValue: direction === 'left' ? MIDDLE_CARD_ORIGO : RIGHTMOST_CARD_ORIGO },\n            { origoName: 'leftmost', targetValue: direction === 'left' ? { x: -SCREEN_WIDTH * 3, y: 0 } : LEFT_CARD_ORIGO },\n            { origoName: 'rightmost', targetValue: direction === 'left' ? RIGHT_CARD_ORIGO : { x: SCREEN_WIDTH * 3, y: 0 } },\n        ]\n\n        const origos = cardOrigos as Record<string, Animated.ValueXY>\n\n        const animations = targetValues.map(({ origoName, targetValue }) => {\n            return Animated.timing(origos[origoName], {\n                toValue: { ...targetValue },\n                useNativeDriver: true,\n                duration: SWIPE_OUT_DURATION\n            })\n        })\n\n        Animated.parallel(animations).start(() => {\n            updateCards(direction)\n        })\n\n    }\n\n\n\n\n\n","import { StyleSheet } from 'react-native'\nimport { CARD_WIDTH, CARD_HEIGHT } from '../carouselConstants'\nimport { theme } from '../../../theme/theme'\n\n\n\nexport const styles = StyleSheet.create({\n    cardBoard: {\n        width: CARD_WIDTH,\n        height: CARD_HEIGHT,\n        backgroundColor: theme.colors.primary.dark,\n        borderRadius: 10,\n        position: 'absolute',\n        alignItems: 'center',\n        paddingTop: 10\n    },\n    image: {\n        width: CARD_WIDTH * 0.6,\n        height: CARD_WIDTH * 0.6,\n        marginBottom: 5,\n    },\n    itemTitle: {\n        color: theme.colors.primary.contrast,\n        fontWeight: 'bold',\n        fontSize: 18,\n        marginBottom: 5\n    },\n    descriptionText: {\n        color: theme.colors.primary.contrast,\n        textAlign: 'center',\n        fontSize: 15,\n        marginBottom: 5\n    },\n    priceGroupText: {\n        color: theme.colors.primary.contrast,\n        textAlign: 'center',\n        fontSize: 18,\n        fontWeight: 'bold',\n        marginBottom: 5\n    },\n    subtitle: {\n        color: theme.colors.primary.contrast,\n        textAlign: 'center',\n        fontWeight: 'bold',\n        marginTop: 5\n    },\n    matchDataButtonsContainer: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    matchButton: {\n        margin: 3\n    },\n    imageAndMatchDataIconsContainer: {\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    matchDataNumber: {\n        color: theme.colors.primary.contrast,\n        fontSize: 18,\n        fontWeight: 'bold',\n    },\n    matchDataView: {\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center', \n        marginLeft: 10,    \n        marginRight: 10\n    },\n    matchIconButtonContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    iconBackgroundCircle: {\n        backgroundColor: theme.colors.primary.light,\n        width: 70,\n        height: 70,\n        borderRadius: 70,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    noItemsTextContainer: {\n        marginTop: 20\n    },\n\n})\n","import React from 'react'\nimport { View, Text, Image } from 'react-native'\nimport { styles } from './styles'\nimport { ItemForCardType } from '../../../types/item/ItemForCardType'\nimport { IconButton } from 'react-native-paper'\nimport { theme } from '../../../theme/theme'\nimport MIcon from 'react-native-vector-icons/MaterialCommunityIcons'\nimport { MatchDataType } from '../../../types/match/MatchDataType'\nimport { matchToHandleVar, selectedMatchVar } from '../../../apollo/cache'\nimport { useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropMatchType } from '../../../types/routes/CompositeNavigationPropTypes'\n\n\n\n\ntype CardContentPropsType = {\n    cardData: ItemForCardType,\n    matchData: MatchDataType\n}\n\n\n\nconst CardContent: React.FC<CardContentPropsType> = ({ cardData, matchData }) => {\n\n    const navigation = useNavigation<CompositeNavigationPropMatchType>()\n\n\n    const handleMatchButtonPressed = () => {\n        selectedMatchVar(undefined)\n        matchToHandleVar({\n            mode: 'BROWSE',\n            item: { id: cardData.id, title: cardData.title, imageSecureUrl: cardData.imageSecureUrl },\n            matches: matchData.myItemsMatchedWithThis,\n            matchedFrom: matchData.myItemsMatchedFromThis,\n            matchedTo: matchData.myItemsMatchedToThis,\n        })\n        navigation.navigate('Match')\n    }\n\n    return (\n            <View style={styles.cardBoard}>\n                <Text style={styles.itemTitle}>{cardData.title.toLocaleUpperCase()}</Text>\n               \n                    <Image \n                        source={{ uri: cardData.imageSecureUrl }}\n                        style={styles.image} \n                    />    \n                    {matchData.couldMatch &&\n                        <View style={styles.matchDataButtonsContainer}>\n                            <View style={styles.matchDataView}>\n                                <MIcon name='cached' size={25} color={theme.colors.primary.contrast} />\n                                <Text style={styles.matchDataNumber}>{matchData.myItemsMatchedWithThis.length}</Text>\n                            </View>\n                            <View style={styles.matchDataView}>\n                                <MIcon name='call-received' size={25} color={theme.colors.primary.contrast} />\n                                <Text style={styles.matchDataNumber}>{matchData.myItemsMatchedFromThis.length}</Text>\n                            </View>\n                            <View style={styles.matchDataView}>\n                                <MIcon name='call-made' size={25} color={theme.colors.primary.contrast} />\n                                <Text style={styles.matchDataNumber}>{matchData.myItemsMatchedToThis.length}</Text>\n                            </View>\n                        </View>                \n                    }\n               \n\n                <Text style={styles.subtitle}>DESCRIPTION:</Text>\n                <Text style={styles.descriptionText}>{cardData.description}</Text>\n                <Text style={styles.subtitle}>PRICE GROUP:</Text>\n                <Text style={styles.priceGroupText}>{`${cardData.priceGroup} €`}</Text>\n                {cardData.brand &&\n                    <React.Fragment>\n                        <Text style={styles.subtitle}>BRAND:</Text>\n                        <Text style={styles.descriptionText}>{cardData.brand}</Text>                 \n                    </React.Fragment>\n                }\n                {matchData.couldMatch &&\n                    <View style={styles.matchIconButtonContainer}>\n                        <View style={styles.iconBackgroundCircle}>\n                            <IconButton\n                                icon='cards-heart'\n                                color={theme.colors.primary.contrast}\n                                size={40}\n                                onPress={handleMatchButtonPressed}\n                            /> \n                        </View>\n                    </View>\n                }\n                {!matchData.couldMatch &&\n                    <View style={styles.noItemsTextContainer}>\n                        <Text style={styles.subtitle}>You have no items in this price group.</Text>\n                    </View>                \n                }\n            </View>\n    )\n}\n\nexport default CardContent\n","import { MatchDataType } from 'src/types/match/MatchDataType'\nimport { ItemForCardType } from '../../../types/item/ItemForCardType'\nimport { MyItemForCarouselType } from '../../../types/item/MyItemType'\n\n\n\nexport const getMatchData = (myItems: MyItemForCarouselType[], thisItem: ItemForCardType): MatchDataType => {\n\n    let couldMatch = false\n    let myItemIdsMatchedToThisItem: { id: string, title: string, imageSecureUrl: string}[] = []\n    let myItemIdsMatchedFromThisItem: { id: string, title: string, imageSecureUrl: string  }[] = []\n\n    myItems.forEach(myItem => {\n        if (myItem.priceGroup === thisItem.priceGroup) {\n            couldMatch = true\n            myItem.matchedTo.forEach(toId => {\n                if (thisItem.id === toId.id) myItemIdsMatchedToThisItem.push({ id: myItem.id, title: myItem.title, imageSecureUrl: myItem.imageSecureUrl ?? '' })\n            })\n            myItem.matchedFrom.forEach(fromId => {\n                if (thisItem.id === fromId.id) myItemIdsMatchedFromThisItem.push({ id: myItem.id, title: myItem.title, imageSecureUrl: myItem.imageSecureUrl ?? '' })\n            })            \n        }\n    })\n\n\n    // This is not a very clever to do this, but there are not likely to be many matched items anyway.\n    let myItemIdsMatchedWithThisItem: { id: string, title: string, imageSecureUrl: string }[] = []\n    myItemIdsMatchedToThisItem.forEach(myId => {\n        const isNotPresent = myItemIdsMatchedFromThisItem.every(fromId => fromId.id !== myId.id)\n        if (!isNotPresent) myItemIdsMatchedWithThisItem.push(myId)\n    })\n\n    myItemIdsMatchedWithThisItem.forEach(bothWayItem => {\n        myItemIdsMatchedToThisItem = myItemIdsMatchedToThisItem.filter(toItem => toItem.id !== bothWayItem.id)\n        myItemIdsMatchedFromThisItem = myItemIdsMatchedFromThisItem.filter(fromItem => fromItem.id !== bothWayItem.id)\n    })\n\n    return {\n        couldMatch: couldMatch,\n        myItemsMatchedToThis: myItemIdsMatchedToThisItem,\n        myItemsMatchedFromThis: myItemIdsMatchedFromThisItem,\n        myItemsMatchedWithThis: myItemIdsMatchedWithThisItem\n    }\n}\n\n\n","import React from 'react'\nimport { Animated } from 'react-native'\nimport { CardOrigosType } from '../Carousel'\nimport { getPanResponder } from './getPanResponder'\nimport CardContent from './CardContent'\nimport { ItemForCardType } from '../../../types/item/ItemForCardType'\nimport { MyItemForCarouselType } from '../../../types/item/MyItemType'\nimport { getMatchData } from './getMatchData'\n\n\ntype CarouselCardPropsType = {\n    cardData: ItemForCardType,\n    cardOrigos: CardOrigosType,\n    updateCards: (direction: 'left' | 'right') => void,\n    onlySwipeOutToLeftAllowed: boolean,\n    onlySwipeOutToRightAllowed: boolean,\n    isAnOnlyCard: boolean,\n    myItems: MyItemForCarouselType[]\n}\n\n\nconst CarouselMiddleCard: React.FC<CarouselCardPropsType> = ({ \n    cardData, \n    cardOrigos, \n    updateCards, \n    onlySwipeOutToLeftAllowed, \n    onlySwipeOutToRightAllowed,\n    isAnOnlyCard,\n    myItems\n }) => {\n\n\n    const matchData = getMatchData(myItems, cardData)\n\n\n    if (isAnOnlyCard) {\n        return (\n            <Animated.View \n                style={{ transform: [{ translateX: cardOrigos.middle.x }]}}\n            >\n                    <CardContent cardData={cardData} matchData={matchData}/>\n            </Animated.View> \n        )\n    }\n\n    const panResponder = getPanResponder(cardOrigos, updateCards, onlySwipeOutToLeftAllowed, onlySwipeOutToRightAllowed)\n\n    return (\n            <Animated.View \n                style={{ transform: [{ translateX: cardOrigos.middle.x }]}}\n                    { ...panResponder.panHandlers }\n            >\n                <CardContent cardData={cardData} matchData={matchData}/>\n            </Animated.View>\n    )\n}\n\nexport default CarouselMiddleCard\n\n\n\n\n\n\n","import { useRef } from 'react'\nimport { PanResponderInstance } from 'react-native'\nimport { PanResponder } from 'react-native'\nimport { CardOrigosType } from '../Carousel'\nimport { SWIPE_LEFT_TRESHOLD } from '../carouselConstants'\nimport { performSetCardOrigoValues } from './performSetCardOrigoValues'\nimport { returnCardsToStartPosition } from './returnCardsToStartPosition'\nimport { swipeCardOut } from './swipeCardOut'\n\n\nexport const getPanResponder = (\n        cardOrigos: CardOrigosType, \n        updateCards: (direction: 'left' | 'right', ) => void,\n        onlySwipeOutToLeftAllowed: boolean,\n        onlySwipeOutToRightAllowed: boolean\n    ): PanResponderInstance => {\n\n\n\n\n    const panResponderBoth = useRef(\n        PanResponder.create({\n            onStartShouldSetPanResponder: (_event, _gestureState) => true,\n            onPanResponderMove: (_event, gestureState) => {\n                performSetCardOrigoValues(gestureState, cardOrigos)\n            },\n            onPanResponderRelease: (_event, gestureState) => {\n                if (-gestureState.dx > SWIPE_LEFT_TRESHOLD) {\n                    swipeCardOut(cardOrigos, 'left', updateCards)\n                } else if (gestureState.dx > SWIPE_LEFT_TRESHOLD) {\n                    swipeCardOut(cardOrigos, 'right', updateCards)\n                } else {\n                    returnCardsToStartPosition(cardOrigos)\n                }\n            }\n        })\n    ).current\n\n    const panResponderOnlySwipeOutToLeft = useRef(\n        PanResponder.create({\n            onStartShouldSetPanResponder: (_event, _gestureState) => true,\n            onPanResponderMove: (_event, gestureState) => {\n                    if (gestureState.dx < 0) {\n                        performSetCardOrigoValues(gestureState, cardOrigos)\n                    }\n            },\n            onPanResponderRelease: (_event, gestureState) => {\n                if (-gestureState.dx > SWIPE_LEFT_TRESHOLD) {\n                    swipeCardOut(cardOrigos, 'left', updateCards)\n                } else {\n                    returnCardsToStartPosition(cardOrigos)\n                }\n            }\n        })\n    ).current\n\n    const panResponderOnlySwipeOutToRight = useRef(\n        PanResponder.create({\n            onStartShouldSetPanResponder: (_event, _gestureState) => true,\n            onPanResponderMove: (_event, gestureState) => {\n                    if (gestureState.dx > 0) {\n                        performSetCardOrigoValues(gestureState, cardOrigos)\n                    }\n            },\n            onPanResponderRelease: (_event, gestureState) => {\n                if (gestureState.dx > SWIPE_LEFT_TRESHOLD) {\n                    swipeCardOut(cardOrigos, 'right', updateCards)\n                }else {\n                    returnCardsToStartPosition(cardOrigos)\n                }\n            }\n        })\n    ).current\n\n    const selectedPanResponder = onlySwipeOutToLeftAllowed ? panResponderOnlySwipeOutToLeft :\n    onlySwipeOutToRightAllowed ? panResponderOnlySwipeOutToRight : panResponderBoth\n\n    return selectedPanResponder\n\n}","import { StyleSheet } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n    carouselRow: {\n        flexDirection: 'row',\n        marginTop: 10\n    },\n})\n","import React from 'react'\nimport { Animated } from 'react-native'\nimport CardContent from './CardContent'\nimport { ItemForCardType } from '../../../types/item/ItemForCardType'\nimport { MyItemForCarouselType } from '../../../types/item/MyItemType'\nimport { getMatchData } from './getMatchData'\n\n\ntype CarouselSideCardPropsType = {\n    cardData: ItemForCardType,\n    sideCardOrigo: Animated.ValueXY | undefined,\n    myItems: MyItemForCarouselType[]\n}\n\n\nconst CarouselSideCard: React.FC<CarouselSideCardPropsType> = ({ cardData, sideCardOrigo, myItems }) => {\n\n    if (!sideCardOrigo) return null\n\n    const matchData = getMatchData(myItems, cardData)\n\n    return (\n            <Animated.View \n                style={{ transform: [{ translateX: (sideCardOrigo.x) }]}}\n            >\n                <CardContent cardData={cardData} matchData={matchData}/>\n            </Animated.View>\n    )\n}\n\nexport default CarouselSideCard\n\n","import React, { useState, useRef } from 'react'\nimport { View, Animated, Text } from 'react-native'\nimport CarouselMiddleCard from './cards/CarouselMiddleCard'\nimport { styles } from './styles'\nimport { MIDDLE_CARD_ORIGO, LEFT_CARD_ORIGO, RIGHT_CARD_ORIGO, LEFTMOST_CARD_ORIGO, RIGHTMOST_CARD_ORIGO\n } from './carouselConstants'\nimport CarouselSideCard from './cards/CarouselSideCard'\nimport { ItemForCardType } from '../../types/item/ItemForCardType'\nimport { MyItemForCarouselType } from '../../types/item/MyItemType'\n\n\n\nexport type CardOrigosType = {\n    leftmost: Animated.ValueXY,\n    left: Animated.ValueXY,\n    middle: Animated.ValueXY,\n    right: Animated.ValueXY,\n    rightmost: Animated.ValueXY,\n}\n\ntype CarouselPropsType = {\n    itemCards: ItemForCardType[],\n    myItems: MyItemForCarouselType[]\n}\n\n\nconst Carousel: React.FC<CarouselPropsType> = ({ itemCards, myItems }) => {\n\n    const cardOrigos = {\n        leftmost: useRef(new Animated.ValueXY({ ...LEFTMOST_CARD_ORIGO })).current,\n        left: useRef(new Animated.ValueXY({ ...LEFT_CARD_ORIGO })).current,\n        middle: useRef(new Animated.ValueXY({ ...MIDDLE_CARD_ORIGO })).current,\n        right: useRef(new Animated.ValueXY({ ...RIGHT_CARD_ORIGO })).current,\n        rightmost: useRef(new Animated.ValueXY({ ...RIGHTMOST_CARD_ORIGO })).current,\n    }\n\n\n    const [middleCardIndex, setMiddleCardIndex] = useState(0)\n\n    const updateCards = (direction: 'left' | 'right') => {\n        const change = direction === 'left' ? 1 : -1\n        setMiddleCardIndex(middleCardIndex => {\n            return middleCardIndex + change\n        })\n        cardOrigos.leftmost.setValue({ ...LEFTMOST_CARD_ORIGO })\n        cardOrigos.left.setValue({ ...LEFT_CARD_ORIGO })\n        cardOrigos.middle.setValue({ ...MIDDLE_CARD_ORIGO })\n        cardOrigos.right.setValue({ ...RIGHT_CARD_ORIGO })\n        cardOrigos.rightmost.setValue({ ...RIGHTMOST_CARD_ORIGO })\n    }\n\n    if (itemCards.length === 0) return (\n        <View>\n            <Text>There are no items</Text>\n        </View>\n    )\n\n    return (\n        <View style={styles.carouselRow}>\n            {middleCardIndex >= 2 &&\n                <CarouselSideCard\n                    cardData={itemCards[middleCardIndex - 2]} \n                    sideCardOrigo={cardOrigos.leftmost}\n                    myItems={myItems}\n                />            \n            }\n            {middleCardIndex >= 1 &&\n                <CarouselSideCard\n                    cardData={itemCards[middleCardIndex - 1]} \n                    sideCardOrigo={cardOrigos.left}\n                    myItems={myItems}\n                />            \n            }\n            {middleCardIndex >= 0 &&\n                <CarouselMiddleCard \n                    cardData={itemCards[middleCardIndex]} \n                    cardOrigos={cardOrigos}\n                    updateCards={updateCards}\n                    onlySwipeOutToLeftAllowed={middleCardIndex === 0}\n                    onlySwipeOutToRightAllowed={middleCardIndex === itemCards.length - 1}\n                    isAnOnlyCard={itemCards.length === 1}\n                    myItems={myItems}\n                />      \n            }\n            {middleCardIndex >= 0 && itemCards.length > middleCardIndex + 1 &&\n                <CarouselSideCard\n                    cardData={itemCards[middleCardIndex + 1]} \n                    sideCardOrigo={cardOrigos.right}\n                    myItems={myItems}\n                />            \n            }\n            {middleCardIndex >= 0 && itemCards.length > middleCardIndex + 2 &&\n                <CarouselSideCard\n                    cardData={itemCards[middleCardIndex + 2]} \n                    sideCardOrigo={cardOrigos.rightmost}\n                    myItems={myItems}\n                />            \n            }\n        </View>\n    )\n}\n\nexport default Carousel\n\n","import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { useLazyQuery, useApolloClient, useQuery } from '@apollo/client'\nimport { styles } from './styles'\nimport BrowseSearchTerms from './BrowseSearchTerms'\nimport { SearchTermsType } from '../../types/browse/SearchTermsType'\nimport { Button } from 'react-native-paper'\nimport { theme } from '../../theme/theme'\nimport { BROWSE_ITEMS_BY_PAGE, MY_ITEMS_FOR_CAROUSEL, MyItemsForCarouselType } from './queries'\nimport Notification from '../common-components/notification/Notification'\nimport { NotificationPropsType } from '../../types/notification/NotificationPropsType'\nimport WaitSpinner from '../common-components/wait-spinner/WaitSpinner'\nimport Carousel from '../carousel/Carousel'\nimport { BrowseItemsByPageResponseType } from '../../types/browse/BrowseItemsByPageType'\nimport { ItemForCardType } from '../../types/item/ItemForCardType'\n\n\n\nconst NUMBER_OF_ITEMS_TO_FETCH_AT_A_GO = 2\n\n\nconst Browse = () => {\n\n    const [searchTerms, setSearchTerms] = useState<SearchTermsType | undefined>(undefined)\n    const [browseNotification, setBrowseNotification] = useState<NotificationPropsType | undefined>(undefined)\n    const [myItemsNotification, setMyItemsNotification] = useState<NotificationPropsType | undefined>(undefined)\n    const [showSetSearchCriteria, setShowSetSearchCriteria] = useState(true)\n    const [browseItemsByPage, { loading: browseLoading, error: browseError, data: browseData, fetchMore }] = useLazyQuery<BrowseItemsByPageResponseType>(BROWSE_ITEMS_BY_PAGE)\n    // const myItems = useQuery<{ data: MyItemsForCarouselType }>(MY_ITEMS_FOR_CAROUSEL)\n    const { loading: myItemsLoading, error: myItemsError, data: myItemsData } = useQuery<MyItemsForCarouselType>(MY_ITEMS_FOR_CAROUSEL)\n\n    const client = useApolloClient()\n\n\n    if (browseError) {\n        console.log(browseError)\n        setBrowseNotification({\n            title: 'ERROR',\n            content: 'Something went wrong. Could not get items for browsing.',\n            themeType: 'error',\n            clearNotification: () => setBrowseNotification(undefined)\n        })\n    }\n    if (myItemsError) {\n        console.log(browseError)\n        setMyItemsNotification({\n            title: 'ERROR',\n            content: 'Something went wrong. Could not get your own items.',\n            themeType: 'error',\n            clearNotification: () => setBrowseNotification(undefined)\n        })\n    }\n\n    // RATIONALE (to be realized in the end): \n    // We always fetch only the first couple of items to get started and then, when the user\n    // has kept swiping items with the carousel to the last item, only then more items are fetched.\n    // Items are  shown in order of descending createdAt.\n\n    const searchCriteriaChanged = async (searchTerms: SearchTermsType) => {\n        // When search criteria change, browseItemsByPage field result needs to be cleared.\n        // This does not remove individual items from cache. New server query is performed.\n        client.cache.modify({\n            fields: {\n                browseItemsByPage() {\n                    return {}\n                }\n            }\n        })\n        setShowSetSearchCriteria(false)\n        setSearchTerms(searchTerms)\n        browseItemsByPage({ variables: {\n            browseItemsByPageInput: {\n                first: NUMBER_OF_ITEMS_TO_FETCH_AT_A_GO,\n                browseItemsInput: searchTerms\n            }\n        }})\n    }\n\n    const getMoreItemsToBrowse = () => {\n        if (fetchMore && browseData) {\n            fetchMore({\n                variables: {\n                    browseItemsByPageInput: {\n                        first: NUMBER_OF_ITEMS_TO_FETCH_AT_A_GO,\n                        after: (browseData as BrowseItemsByPageResponseType).browseItemsByPage.pageInfo.endCursor,\n                        browseItemsInput: searchTerms\n                    }\n                }\n            })\n        }\n    }\n\n    const browseItems = browseData as BrowseItemsByPageResponseType\n    const browseItemsAsCarouselCards = browseItems && browseItems.browseItemsByPage && browseItems.browseItemsByPage.edges ?\n        browseItems.browseItemsByPage.edges.filter(edge => edge !== undefined).map(edge => edge.node as ItemForCardType)\n        : \n        undefined\n\n\n    return (\n        <View>\n            <View style={styles.browseContainer}>\n                {browseNotification !== undefined &&\n                    <Notification { ...browseNotification }/>\n                }\n                {myItemsNotification !== undefined &&\n                    <Notification { ...myItemsNotification }/>\n                }\n                <Text style={styles.pageTitle}>BROWSE ITEMS</Text>\n                {searchTerms === undefined || showSetSearchCriteria ?\n                    <BrowseSearchTerms\n                        searchTerms={searchTerms}\n                        searchCriteriaChanged={searchCriteriaChanged}\n                        setShowSetSearchCriteria={setShowSetSearchCriteria}\n                    />\n                    :\n                    <View style={styles.submitButtonContainer}>\n                        <Button \n                            icon='square-edit-outline' \n                            mode='contained' \n                            onPress={() => setShowSetSearchCriteria(true)}\n                            disabled={false}\n                            color={theme.colors.primary.main}\n                            >\n                                EDIT SEARCH CRITERIA\n                        </Button> \n                    </View>\n                }\n            </View>\n\n            {browseLoading && \n                <WaitSpinner/>\n            }\n\n            {!showSetSearchCriteria && browseItemsAsCarouselCards ?\n                browseItemsAsCarouselCards.length === 0 ?\n                    <View style={styles.searchCriteriaContainer}>\n                            {(!searchTerms?.priceGroups && !searchTerms?.phrasesInTitle && !searchTerms?.phrasesInDescription && !searchTerms?.brands) ?\n                                <View style={styles.noItemsContainer}>\n                                    <Text style={styles.noItemsText}>\n                                        Currently there are no items in the database.\n                                    </Text>\n                                </View>\n                                :\n                                <View style={styles.noItemsContainer}>\n                                    <Text style={styles.noItemsText}>\n                                        No items were returned\n                                    </Text>\n                                    <Text style={styles.noItemsText}>\n                                        with the selected search criteria. \n                                    </Text>\n                                </View>\n                            }                        \n                    </View>\n                    :\n                    <Carousel \n                        itemCards={browseItemsAsCarouselCards} \n                        myItems={myItemsData === undefined ? [] : myItemsData.myItems}\n                    />\n                        :\n                        <>\n                            {myItemsLoading ? <WaitSpinner/> : null}\n                        </>\n            }\n\n\n            {!showSetSearchCriteria && browseData && (browseData as BrowseItemsByPageResponseType).browseItemsByPage.pageInfo.hasNextPage &&\n                <View style={styles.fetchMoreContainer}>\n                    <Button \n                        icon='page-next-outline' \n                        mode='contained' \n                        onPress={getMoreItemsToBrowse}\n                        disabled={false}\n                        color={theme.colors.primary.main}\n                    >\n                        MORE\n                    </Button> \n                </View>\n            }\n\n        </View>\n    )\n}\n\nexport default Browse\n\n","import { StyleSheet } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n\n    pageTitle: {\n        marginTop: 60,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    subtitle: {\n        marginTop: 20,\n        marginBottom: 10,\n        fontSize: 20,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    removeAccountButtonView: {\n        marginTop: 5,\n        justifyContent: 'center',\n        marginBottom: 30,\n    },\n    pageContentContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n    },\n    waitSpinnerContainer: {\n        height: 100,\n        width: 300,\n    },\n    infoText: {\n        textAlign: 'center',\n    },\n})\n","import { gql } from '@apollo/client'\n\n\nexport const REMOVE_ACCOUNT = gql`\n    mutation removePerson {\n        removePerson {\n            code\n            success\n            message\n            username\n            facebookName\n        }\n    }\n`\n\n","import { RemoveAccountServerResponseType } from '../../types/removeAccount/RemoveAccountServerResponseType'\n\nexport const parseRemoveAccountServerResponse = (response: unknown): string | boolean => {\n    const removeAccountResponse = response as RemoveAccountServerResponseType\n    if (typeof removeAccountResponse.data.removePerson.success !== 'boolean') throw new Error('Response success must be of type boolean.')\n    if (!removeAccountResponse.data.removePerson.success) return removeAccountResponse.data.removePerson.message\n    return true\n}\n\n\n","import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { theme } from '../../theme/theme'\nimport { Button } from 'react-native-paper'\nimport { useRemoveAccount } from './useRemoveAccount'\nimport WaitSpinner from '../common-components/wait-spinner/WaitSpinner'\nimport Notification from '../common-components/notification/Notification'\nimport { CheckBox } from 'react-native-elements'\n\n\ntype RemoveAccountPropsType = {\n    showConfirmRemoveAccount: boolean,\n    setShowConfirmRemoveAccount: (newValue: boolean) => void,\n}\n\n\nconst RemoveAccount: React.FC<RemoveAccountPropsType> = ({ showConfirmRemoveAccount, setShowConfirmRemoveAccount }) => {\n\n    const { isSubmitting, submitRemoveAccount, notification } = useRemoveAccount()\n    const [isConfirmed, setIsConfirmed] = useState(false)\n\n    const cancel = () => {\n        setIsConfirmed(false)\n        setShowConfirmRemoveAccount(false)\n    }\n\n\n    return (\n        <View style={styles.pageContentContainer}>\n\n            <Text style={styles.subtitle}>REMOVE ACCOUNT</Text>\n\n            {notification !== undefined &&\n                <Notification  { ...notification }/>\n            }\n\n            {showConfirmRemoveAccount ?\n                <View>\n                    <Text style={styles.infoText}>\n                        You are about to remove your account.\n                    </Text>\n                    <Text style={styles.infoText}>\n                        Are you sure you want to continue?\n                    </Text> \n                    <Text style={styles.infoText}>\n                        All your data will be deleted and\n                    </Text> \n                    <Text style={styles.infoText}>\n                        your account cannot be later restored.\n                    </Text>\n                    <CheckBox\n                        center\n                        title='I understand and want to proceed.'\n                        checked={isConfirmed}\n                        onPress={() => setIsConfirmed(!isConfirmed)}\n                        checkedColor={theme.colors.primary.main}\n                        textStyle={{ fontWeight: 'normal' }}\n                        containerStyle={{ backgroundColor: 'transparent', borderWidth: 0 }}\n                        testID='remove-account-checkbox'\n                    />\n\n                    <View style={styles.removeAccountButtonView}>\n                        <Button \n                            icon='account-remove' \n                            mode='contained' \n                            onPress={submitRemoveAccount}\n                            color={theme.colors.error}\n                            disabled={isSubmitting || !isConfirmed}\n                            testID='remove-account-permanently'\n                        >\n                            REMOVE MY ACCOUNT\n                        </Button>\n                    </View>      \n                    <Text style={styles.infoText}>\n                        Having second thoughts?\n                    </Text>      \n                    <View style={styles.removeAccountButtonView}>\n                        <Button \n                            icon='keyboard-return' \n                            mode='contained' \n                            onPress={cancel}\n                            color={theme.colors.primary.main}\n                            disabled={isSubmitting}\n                            testID='cancel-remove-account'\n                        >\n                            CANCEL REMOVE MY ACCOUNT\n                        </Button>\n                    </View>                                                    \n                </View>\n\n                :\n\n                <View>\n                    <Text style={styles.infoText}>\n                        Wish to permanently remove your account?\n                    </Text>\n                    <View style={styles.removeAccountButtonView}>\n                        <Button \n                            icon='account-remove' \n                            mode='contained' \n                            onPress={() => setShowConfirmRemoveAccount(true)}\n                            color={theme.colors.primary.main}\n                            testID='start-removing-account'\n                        >\n                            REMOVE MY ACCOUNT\n                        </Button>\n                    </View>                    \n                </View>\n            }\n            <View style={styles.waitSpinnerContainer}>\n                {isSubmitting && <WaitSpinner/>}\n            </View>\n        </View>\n    )\n}\n\nexport default RemoveAccount\n\n\n\n\n","import { useContext, useState } from 'react'\nimport AppContext from '../../app-state/AppContext'\nimport { useMutation } from '@apollo/client'\nimport { REMOVE_ACCOUNT } from './queries'\nimport { parseRemoveAccountServerResponse } from './parseRemoveAccountServerResponse'\nimport { NotificationPropsType } from '../../types/notification/NotificationPropsType'\nimport { REMOVE_ACCOUNT_NOTIFICATION } from '../../utils/common-constants/errorMessages'\nimport { ActionTypesEnum } from '../../types/app-state/ActionTypesEnum'\n\n\n\ntype UseRemoveAccountType = {\n    isSubmitting: boolean,\n    submitRemoveAccount: () => Promise<void>\n    notification: NotificationPropsType | undefined\n}\n\n\n\nexport const useRemoveAccount = (): UseRemoveAccountType => {\n\n    const [isSubmitting, setIsSubmitting] = useState(false)\n    const { dispatch } = useContext(AppContext)\n    const [removeAccount] = useMutation(REMOVE_ACCOUNT)\n    const [notification, setNotification] = useState<NotificationPropsType | undefined>(undefined)\n\n\n    const submitRemoveAccount = async (): Promise<void> => {\n        setIsSubmitting(true)\n        try {\n            const response = await removeAccount()\n            const parsedResponse = parseRemoveAccountServerResponse(response)\n            const success = typeof parsedResponse !== 'string' \n            if (success) {\n                setNotification({\n                    title: REMOVE_ACCOUNT_NOTIFICATION.successTitle,\n                    content: REMOVE_ACCOUNT_NOTIFICATION.successContent,\n                    themeType: 'success',\n                    clearNotification: () => {\n                        dispatch({ type: ActionTypesEnum.SET_LOGGED_IN_USER, data: undefined })\n                    }\n                })\n            } else {\n                console.log(parsedResponse)\n                throw new Error()\n            }\n            setIsSubmitting(false)\n        } catch (error) {\n            console.log(error)\n            setNotification({\n                title: REMOVE_ACCOUNT_NOTIFICATION.errorTitle,\n                content: REMOVE_ACCOUNT_NOTIFICATION.errorContent,\n                themeType: 'error',\n                clearNotification: () => setNotification(undefined)\n            })\n            setIsSubmitting(false)\n        }\n    }\n\n\n    return {\n        isSubmitting,\n        submitRemoveAccount,\n        notification\n    }\n\n}","import { StyleSheet } from 'react-native'\n\n\nexport const styles = StyleSheet.create({\n\n    logoutButtonView: {\n        marginTop: 5,\n        justifyContent: 'center',\n        marginBottom: 30,\n    },\n    contentContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 20,\n    },\n    infoText: {\n        textAlign: 'center',\n    },\n})\n","import React, { useContext } from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { theme } from '../../theme/theme'\nimport { Button } from 'react-native-paper'\nimport AppContext from '../../app-state/AppContext'\nimport { ActionTypesEnum } from '../../types/app-state/ActionTypesEnum'\n\n\n\nconst Logout = () => {\n\n    const { dispatch } = useContext(AppContext)\n\n    \n    const logout = () => {\n        dispatch({ type: ActionTypesEnum.SET_LOGGED_IN_USER, data: undefined })\n    }\n\n    return (\n        <View style={styles.contentContainer}>\n                    <Text style={styles.infoText}>\n                        Wish to logout from SWAPLINGS?\n                    </Text>\n                    <View style={styles.logoutButtonView}>\n                        <Button \n                            icon='logout' \n                            mode='contained' \n                            onPress={logout}\n                            color={theme.colors.primary.main}\n                            testID='logout-button'\n                        >\n                            LOGOUT\n                        </Button>\n                    </View>                    \n        </View>\n    )\n}\n\nexport default Logout\n\n\n","import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport RemoveAccount from './RemoveAccount'\nimport Logout from '../logout/Logout'\n\n\nconst Settings = () => {\n\n    const [showConfirmRemoveAccount, setShowConfirmRemoveAccount] = useState(false)\n\n\n    return (\n        <View style={styles.pageContentContainer}>\n            <Text style={styles.pageTitle}>SETTINGS</Text>\n            <Logout/>\n            <RemoveAccount\n                showConfirmRemoveAccount={showConfirmRemoveAccount}\n                setShowConfirmRemoveAccount={setShowConfirmRemoveAccount}\n            />\n\n        </View>\n    )\n}\n\nexport default Settings\n\n\n\n\n","import { StyleSheet } from 'react-native'\nimport { theme } from '../../theme/theme'\n\n\n\nexport const styles = StyleSheet.create({\n\n    imageView: {\n        width: 150,\n        height: 150,\n        borderRadius: 6\n    },\n    iconView: {\n        backgroundColor: theme.colors.primary.dark,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center' \n    },\n    pageTitle: {\n        marginTop: 60,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    infoText: {\n        textAlign: 'center'\n    },\n    subtitle: {\n        fontWeight: 'bold',\n        fontSize: 18,\n        marginBottom: -5,\n        marginTop: 10\n    },\n    formContainer: {\n        marginLeft: 20\n    },\n    priceGroupInfo: {\n        marginTop: 8,\n        marginBottom: 5\n    },\n    priceGroupInfoWithError: {\n        marginTop: 8,\n        marginBottom: 5,\n        color: theme.colors.error,\n    },\n    priceGroupAndImageContainer: {\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start' ,\n    },\n    priceGroupToggleButtonsContainer: {\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start'  \n    },\n    toggleButton: {\n        marginBottom: 5, \n        borderColor: theme.colors.primary.light, \n        borderWidth: 1\n    },\n    toggleButtonOrImageContainer: {\n        marginRight: 30,\n    },\n    submitButtonContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 20\n    },\n    itemImageButton: {\n        backgroundColor: theme.colors.primary.dark,\n    }\n\n})\n","import React from 'react'\nimport { View, Image, TouchableOpacity } from 'react-native'\nimport { IconButton } from 'react-native-paper'\nimport {  useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropAddType } from '../../types/routes/CompositeNavigationPropTypes'\nimport { itemUnderConstructionImageVar } from '../../apollo/cache'\nimport { useReactiveVar } from '@apollo/client'\nimport { styles } from './styles'\n\n\n\n\ntype ItemImagePropsType = {\n    disabled: boolean\n}\n\nconst ItemImage: React.FC<ItemImagePropsType> = ({ disabled }) => {\n\n    const navigation = useNavigation<CompositeNavigationPropAddType>()\n    const itemImage = useReactiveVar(itemUnderConstructionImageVar)\n\n    const navigateToImaging = () => {\n        if (!disabled) {\n            navigation.navigate('Imaging')\n        }\n    }\n\n    return (\n        <React.Fragment>\n            {itemImage && itemImage.clientUrl ?\n                <TouchableOpacity onPress={navigateToImaging}>\n                    <Image\n                        style={styles.imageView}\n                        source={{ uri: itemImage.clientUrl }}\n                    />\n                </TouchableOpacity>\n                :\n                <View style={[styles.imageView, styles.iconView]}>\n                    <IconButton\n                        icon='image-edit'\n                        color='#FFFFFF'\n                        size={100}\n                        style={styles.itemImageButton}\n                        onPress={navigateToImaging}\n                    />  \n                </View>\n            }\n        </React.Fragment>\n    )\n}\n\nexport default ItemImage\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport { Button } from 'react-native-paper'\nimport { theme } from '../../theme/theme'\nimport { styles } from './styles'\nimport { PriceGroupEnum, priceGroups } from '../../types/item/PriceGroupEnum'\n\n\n\n\ntype TogglePriceGroupButtonsPropsType = {\n    priceGroup: PriceGroupEnum | '', \n    setPriceGroup: (newValue: PriceGroupEnum) => void,\n    disabled: boolean\n}\n\nconst TogglePriceGroupButtons: React.FC<TogglePriceGroupButtonsPropsType> = ({ priceGroup, setPriceGroup, disabled }) => {\n\n    const isSelectedColor = theme.colors.primary.main\n    const isNotSelectedColor = '#efebe9'\n\n    return (\n\n        <View style={styles.priceGroupToggleButtonsContainer}>\n            {priceGroups.map(group => {\n                return (\n                    <Button \n                        key={group.text + 'toggle-button'}\n                        mode='contained' \n                        onPress={() => setPriceGroup(group.groupEnum)}\n                        disabled={disabled}\n                        color={group.groupEnum === priceGroup ? isSelectedColor : isNotSelectedColor}\n                        style={styles.toggleButton}\n                    >\n                        {group.text}\n                    </Button>\n                )\n            })}\n\n        </View>\n\n    )\n}\n\nexport default TogglePriceGroupButtons\n","import { gql } from '@apollo/client'\n\n\n\nexport const ADD_ITEM = gql`\n    mutation addItem($addItemInput: AddItemInput!) {\n        addItem(addItemInput: $addItemInput) {\n            code\n            success\n            message\n            item {\n                id\n                title\n                priceGroup\n                description\n                brand\n                imagePublicId\n                imageSecureUrl\n            }\n        }\n    }\n`\n\n\nexport type AddItemInputVariablesType = {\n    title: string,\n    description: string,\n    brand?: string,\n    priceGroup: string,\n    imagePublicId: string,\n    imageSecureUrl: string\n}\n\nexport type AddedItemType = {\n    id: string,\n    title: string,\n    priceGroup: string,\n    description: string,\n    brand: string | null,\n    imagePublicId: string | null,\n    imageSecureUrl: string | null,\n}\n\nexport type AddItemResponseType = {\n    addItem: {\n        code: string,\n        success: boolean,\n        message: string,\n        item: AddedItemType | null,\n    }\n}\n\n\n\n\n\n\n\n\n","import { NotificationPropsType } from '../../types/notification/NotificationPropsType'\nimport { ADD_ITEM_NOTIFICATION } from '../../utils/common-constants/errorMessages'\n\n\n\n\n\nexport const setAddItemOutcomeNotification = (\n    type: 'success' | 'error',\n    setNotification: (newNotification: NotificationPropsType | undefined,) => void,\n    clearAll: () => void\n): void => {\n\n        if (type === 'success') {\n            setNotification({\n                title: ADD_ITEM_NOTIFICATION.successTitle,\n                content: ADD_ITEM_NOTIFICATION.successContent,\n                themeType: 'success',\n                clearNotification: () => {\n                    clearAll()\n                    setNotification(undefined)\n                }\n            })\n        } else {\n            setNotification({\n                title: ADD_ITEM_NOTIFICATION.errorTitle,\n                content: ADD_ITEM_NOTIFICATION.errorContent,\n                themeType: 'error',\n                clearNotification: () => {\n                    clearAll()\n                    setNotification(undefined)\n                }\n            }) \n        }\n\n}","import { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { NotificationPropsType } from 'src/types/notification/NotificationPropsType'\nimport { ADD_ITEM, AddItemInputVariablesType, AddItemResponseType } from './queries'\nimport { updateCacheAfterAddedItem } from './updateCacheAfterAddedItem'\nimport { setAddItemOutcomeNotification } from './addItemOutcomeNotifications'\n\n\ntype UseAddItemType = {\n    submitting: boolean,\n    submitAddItem: (itemDetails: AddItemInputVariablesType) => Promise<void>,\n    notification: NotificationPropsType | undefined,\n    \n}\n\n\n\nexport const useAddItem = (clearAll: () => void): UseAddItemType => {\n\n    const [submitting, setSubmitting] = useState(false)\n    const [addItem] = useMutation<AddItemResponseType, { addItemInput: AddItemInputVariablesType }>(ADD_ITEM, {\n        update(cache, { data }) {\n            updateCacheAfterAddedItem(cache, data)\n        }\n    })\n\n    const [notification, setNotification] = useState<NotificationPropsType | undefined>(undefined)\n\n\n    const submitAddItem = async (itemDetails: AddItemInputVariablesType): Promise<void> => {\n        setSubmitting(true)\n        try {\n            const { data } = await addItem({ variables: { addItemInput: itemDetails }})\n            if (data && data.addItem.success) setAddItemOutcomeNotification('success', setNotification, clearAll)\n            else  throw new Error()  \n            setSubmitting(false)\n        } catch (error) {\n            setAddItemOutcomeNotification('error', setNotification, clearAll)\n            setSubmitting(false)\n        }\n    }\n\n    return {\n        submitting,\n        submitAddItem,\n        notification\n    }\n\n}","import { gql, ApolloCache } from '@apollo/client'\nimport { AddItemResponseType } from './queries'\n\n\n\nexport const updateCacheAfterAddedItem = (cache: ApolloCache<AddItemResponseType>, data: AddItemResponseType | null | undefined) => {\n    console.log(cache)\n    cache.modify({\n        fields: {\n            myItems(existingItems = []) {\n                if (!data) return existingItems\n                const newItemRef = cache.writeFragment({\n                    data: data.addItem.item,\n                    fragment: gql`\n                        fragment NewItem on Item {\n                            id\n                            title\n                            priceGroup\n                            description\n                            brand\n                            imagePublicId\n                            imageSecureUrl\n                        }\n                    `\n                })\n                return [...existingItems, newItemRef]\n            }\n        }\n    })\n}","import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport ItemImage from './ItemImage'\nimport FormTextInput from '../common-components/form-text-input/FormTextInput'\nimport TogglePriceGroupButtons from './TogglePriceGroupButtons'\nimport { Button } from 'react-native-paper'\nimport { theme } from '../../theme/theme'\nimport { itemUnderConstructionImageVar } from '../../apollo/cache'\nimport { useReactiveVar } from '@apollo/client'\nimport { useAddItem } from './useAddItem'\nimport Notification from '../common-components/notification/Notification'\nimport { PriceGroupEnum } from '../../types/item/PriceGroupEnum'\nimport { AddItemInputVariablesType } from './queries'\nimport { titleIsValid, descriptionIsValid, brandIsValid, itemInputIsValid } from './validations'\n\n\n\nconst Add = () => {\n\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [brand, setBrand] = useState('')\n    const [priceGroup, setPriceGroup] = useState<PriceGroupEnum | ''>('')\n    const itemImage = useReactiveVar(itemUnderConstructionImageVar)\n    const [showErrors, setShowErrors] = useState(false)\n\n    const clearAll = () => {\n        setTitle('')\n        setDescription('')\n        setBrand('')\n        setPriceGroup('')\n        itemUnderConstructionImageVar(undefined)\n        setShowErrors(false)\n    }    \n\n    const { notification, submitAddItem, submitting } = useAddItem(clearAll)\n\n    const submitItemDetails = async () => {\n        if (itemImage !== undefined && !itemInputIsValid(title, description, brand, priceGroup, itemImage)) {\n            setShowErrors(true)\n        } else {\n            // Actually this itemImage !== undefined is checked above, and therefore unnecessary, \n            // but for some reason Typescript keeps complaining, so the extra check is performed to satisfy Typescript.\n            if (itemImage) {\n                let itemDetails: AddItemInputVariablesType = { \n                title: title, description: description, priceGroup: priceGroup, imagePublicId: itemImage.publicId, imageSecureUrl: itemImage.secureUrl \n            }\n            if (brand) itemDetails = { ...itemDetails, brand: brand }\n            await submitAddItem(itemDetails)\n            }\n        }\n    }\n\n    \n    return (\n        <View>\n            {notification !== undefined &&\n                <Notification  { ...notification }/>\n            }    \n            <Text style={styles.pageTitle}>ADD A NEW ITEM</Text>\n            <Text  style={styles.infoText}>Fill in item details and then submit.</Text>\n\n            <View style={styles.formContainer}>\n                <Text style={styles.subtitle}>TITLE</Text>\n                <FormTextInput\n                    target='itemTitle'\n                    value={title}\n                    handleValueChange={text => setTitle(text)}\n                    isEditable={!submitting}\n                    isVisible={true}\n                    error={showErrors && !titleIsValid(title) ? 'RED_TITLE' : undefined}\n                />\n                <Text style={styles.subtitle}>DESCRIPTION</Text>\n                <FormTextInput\n                    target='itemDescription'\n                    value={description}\n                    handleValueChange={text => setDescription(text)}\n                    isEditable={!submitting}\n                    isVisible={true}\n                    error={showErrors && !descriptionIsValid(description) ? 'RED_TITLE' : undefined}\n                />\n                <Text style={styles.subtitle}>BRAND</Text>\n                <FormTextInput\n                    target='itemBrand'\n                    value={brand}\n                    handleValueChange={text => setBrand(text)}\n                    isEditable={!submitting}\n                    isVisible={true}\n                    error={showErrors && brand !== '' && !brandIsValid(brand) ? 'RED_TITLE' : undefined}\n                />\n                <View style={styles.priceGroupAndImageContainer}>\n                    <View style={styles.toggleButtonOrImageContainer}>\n                        <Text style={styles.subtitle}>PRICE GROUP</Text>\n                        {showErrors && priceGroup === '' ?\n                            <Text style={styles.priceGroupInfoWithError}>Estimate is required</Text>\n                            :\n                            <Text style={styles.priceGroupInfo}>Estimate the value in €</Text>\n                        }\n                        <TogglePriceGroupButtons\n                            priceGroup={priceGroup}\n                            setPriceGroup={setPriceGroup}\n                            disabled={submitting}\n                        />\n                    </View>\n                    <View style={styles.toggleButtonOrImageContainer}>\n                        <Text style={styles.subtitle}>PHOTO</Text>\n                        {showErrors && !itemImage ?\n                            <Text style={styles.priceGroupInfoWithError}>Tap (photo is required)</Text>\n                            :\n                            <Text style={styles.priceGroupInfo}>Tap to take a photo</Text>\n                        }\n                        <ItemImage disabled={submitting}/>\n                    </View>\n                </View>\n            </View>\n\n            <View style={styles.submitButtonContainer}>\n                <Button \n                    icon='send' \n                    mode='contained' \n                    onPress={submitItemDetails}\n                    disabled={submitting}\n                    color={!itemImage || title === '' || description === '' || priceGroup === '' ?\n                        theme.colors.primary.light\n                        :\n                        theme.colors.primary.main}\n                >\n                    SUBMIT\n                </Button>\n            </View>\n        </View>\n\n    )\n}\n\nexport default Add\n\n","export enum RoutesEnum {\n    'HOME' = 'Home',\n    'BROWSE' = 'Browse',\n    'ADD' = 'Add',\n    'SETTINGS' = 'Settings',\n    'IMAGING' = 'Imaging',\n    'MATCH' = 'Match'\n}","import { StyleSheet, Dimensions } from 'react-native'\nimport { theme } from '../../theme/theme'\n\n\nexport const styles = StyleSheet.create({\n\n    pageTitle: {\n        marginTop: 60,\n        marginBottom: 10,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    image: {\n        width: 150,\n        height: 150,\n        marginBottom: 5,\n        // marginTop: 5,\n        borderRadius: 8,\n        // backgroundColor: 'orange'\n    },\n    matchImage: {\n        width: 120,\n        height: 120,\n        margin: 10,\n        borderRadius: 8,\n        // backgroundColor: 'orange'\n    },\n    imageRowContainer: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    myItemImage: {\n        width: 80,\n        height: 80,\n        marginLeft: 3,\n        marginRight: 3,\n        borderRadius: 3,\n        backgroundColor: 'orange'\n    },\n\n    itemTitle: {\n        // marginTop: 20,\n        // marginBottom: 10,\n        fontSize: 20,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    matchButtonView: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 20,\n        marginBottom: 20,\n    },\n\n    pageContentContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        \n    },\n    itemImageButton: {\n        backgroundColor: theme.colors.primary.dark,\n    },\n    iconContainer: {\n        backgroundColor: theme.colors.primary.dark,\n        borderRadius: 3\n    },\n    matchImageRowContainer: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: theme.colors.primary.dark,\n        borderRadius: 6,\n        marginBottom: 10,\n    },\n    removeWarningContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        // height: 120,\n    },\n    removeAccountButtonView: { \n        justifyContent: 'center',\n        marginBottom: 20,\n        // width: '60%'\n    },\n    removeWarningText: {\n        marginTop: 5,\n        color: theme.colors.primary.main,\n        marginBottom: -5,\n    },\n    matchImageCentralIconsContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 8,\n        marginRight: 8,\n    },\n    iconBackgroundCircle: {\n        backgroundColor: theme.colors.primary.light,\n        width: 50,\n        height: 50,\n        borderRadius: 50,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 10,\n    },\n    newPostContainer: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        // marginLeft: 8,\n        // marginRight: 8,\n        width: '100%',\n        // backgroundColor: 'orange',\n    },\n    postIconBackgroundCircle: {\n        backgroundColor: theme.colors.primary.light,\n        width: 45,\n        height: 45,\n        borderRadius: 45,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 10,\n        marginTop: 5,\n    },\n    manageMatchPageContainer: {\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        // backgroundColor: 'orange',\n        width: Dimensions.get('window').width,\n\n    },\n    chatContainer: {\n        // backgroundColor: 'rosybrown',\n        height: Dimensions.get('window').height * 0.45,\n        width: Dimensions.get('window').width,\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        // marginTop: 10\n    },\n    chatPostContainer: {\n        width: Dimensions.get('window').width * 0.9,\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        marginBottom: 10,\n        // backgroundColor: theme.colors.primary.veryLight,\n        borderRadius: 6,\n    },\n    dateTimeText: {\n        fontStyle: 'italic',\n        fontSize: 12,\n        color: theme.colors.primary.light\n    },\n    contentContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        // backgroundColor: 'powderblue',\n        width: Dimensions.get('window').width * 0.9 - 2 * 40,\n        marginLeft: 5,\n        marginRight: 5,\n    },\n    avatarContainer: {\n        width: 40,\n        height: 40,\n        // backgroundColor: 'powderblue',\n    },\n    scrollView: {\n        flex: 1,\n        flexGrow: 1,\n    }\n})\n","import {  gql } from '@apollo/client'\nimport { MyItemType } from 'src/types/item/MyItemType'\n\n\nexport const MY_ITEMS_IN_CACHE = gql`\n            query MyItemsInCache {\n                myItems {\n                    id\n                    title\n                    priceGroup\n                    imageSecureUrl\n                }\n            }\n        `\n\n\nexport const ITEMS_CHAT = gql`\n    query itemsChat($itemsChatInput: ItemsChatInput!){\n        itemsChat(itemsChatInput: $itemsChatInput) {\n            id \n            itemIdA\n            itemIdB\n            posts {\n                post\n                postingItemId\n                createdAt                \n            }\n          \n        }\n    }\n`\nexport type ItemsChatInputVariablesType = {\n    itemIdA: string,\n    itemIdB: string,\n}\nexport type ItemsChatResponseType = {\n    itemsChat: \n    {\n        id: string,\n        itemIdA: string,\n        itemIdB: string,\n        posts: {\n            post: string,\n            postingItemId: string,\n            createdAt: string,\n        }[]\n    }\n\n}\n\n\nexport const REMOVE_MATCH = gql`\n    mutation removeMatch($changeMatchInput: ChangeMatchInput) {\n        removeMatch(changeMatchInput: $changeMatchInput) {\n            success\n            message\n            myItem {\n                id\n                title \n                priceGroup\n                description\n                brand\n                imagePublicId\n                imageSecureUrl\n                matchedTo {\n                    id\n                    title\n                    priceGroup\n                    description\n                    brand\n                    imagePublicId\n                    imageSecureUrl\n                }\n                matchedFrom {\n                    id\n                    title\n                    priceGroup\n                    description\n                    brand\n                    imagePublicId\n                    imageSecureUrl\n                }\n            }\n        }\n    }\n`\n\n\n\nexport const ADD_MATCH = gql`\n    mutation addMatch($changeMatchInput: ChangeMatchInput) {\n        addMatch(changeMatchInput: $changeMatchInput) {\n            success\n            message\n            myItem {\n                id\n                title \n                priceGroup\n                description\n                brand\n                imagePublicId\n                imageSecureUrl\n                matchedTo {\n                    id\n                    title\n                    priceGroup\n                    description\n                    brand\n                    imagePublicId\n                    imageSecureUrl\n                }\n                matchedFrom {\n                    id\n                    title\n                    priceGroup\n                    description\n                    brand\n                    imagePublicId\n                    imageSecureUrl\n                }\n            }\n        }\n    }\n`\n\n\nexport const ADD_POST = gql`\n    mutation addPost($addPostInput: AddPostInput!) {\n        addPost(addPostInput: $addPostInput) {\n            success\n            message\n            chat {\n                id\n                itemIdA\n                personIdA\n                itemIdB\n                personIdB\n                posts {\n                    post\n                    postingItemId\n                    createdAt\n                }\n            }\n        }\n    }\n`\n\n\nexport type ChatType = {\n    id: string,\n    itemIdA: string,\n    personIdA: string,\n    itemIdB: string,\n    personIdB: string,\n    posts: {\n        post: string,\n        postingItemId: string,\n        createdAt: number\n    }[]\n}\n\nexport type AddPostInputVariablesType = {\n    itemIdA: string,\n    itemIdB: string,\n    post: string\n}\nexport type AddPostResponseType = {\n    addPost: {\n        success: boolean,\n        message: string,\n        chat: ChatType\n    }\n}\n\n\n\nexport type ChangeMatchInputVariablesType = {\n    myItemId: string,\n    itemToId: string,\n}\n\n\nexport type AddMatchResponseType = {\n    addMatch: {\n        success: boolean,\n        message: string,\n        myItem: MyItemType\n    }\n}\n\nexport type RemoveMatchResponseType = {\n    removeMatch: {\n        success: boolean,\n        message: string,\n        myItem: MyItemType\n    }\n}\n\n\n\n\n","import { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { NotificationPropsType } from 'src/types/notification/NotificationPropsType'\nimport { ADD_MATCH, ChangeMatchInputVariablesType, AddMatchResponseType, REMOVE_MATCH, RemoveMatchResponseType } from './queries'\nimport { ItemImageButtonActionType } from '../common-components/handle-matches/ItemImageButtonsRow'\n\n\n\ntype UseHandleMatchType = {\n    submitting: boolean,\n    submitAddMatch: (action: ItemImageButtonActionType) => Promise<boolean>,\n    notification: NotificationPropsType | undefined,\n    submitRemoveMatch: (action: ItemImageButtonActionType) => Promise<boolean>,\n}\n\n\n\nexport const useHandleMatch = (): UseHandleMatchType => {\n\n\n    const [submitting, setSubmitting] = useState(false)\n    const [notification, setNotification] = useState<NotificationPropsType | undefined>(undefined)\n    const [addMatch] = useMutation<AddMatchResponseType, { changeMatchInput: ChangeMatchInputVariablesType }>(ADD_MATCH)\n    const [removeMatch] = useMutation<RemoveMatchResponseType, { changeMatchInput: ChangeMatchInputVariablesType }>(REMOVE_MATCH)  \n\n\n    const submitAddMatch = async (action: ItemImageButtonActionType): Promise<boolean> => {\n        setSubmitting(true)\n        const addMatchInput = {\n            myItemId: action.myItem.id, \n            itemToId: action.otherItem.id\n        }\n        try {\n            const { data } = await addMatch({ variables: { changeMatchInput: addMatchInput }})\n            setSubmitting(false)\n            if (data?.addMatch.success) return true\n            return false\n        } catch (error) {\n            console.log('error\\n', error)\n            setNotification({\n                title: 'ERROR',\n                content: 'Error in adding match',\n                themeType: 'error',\n                clearNotification: () =>  setNotification(undefined)\n            })\n            setSubmitting(false)\n            return false\n        }\n    }\n\n    const submitRemoveMatch = async (action: ItemImageButtonActionType): Promise<boolean> => {\n        setSubmitting(true)\n        const removeMatchInput = {\n            myItemId: action.myItem.id, \n            itemToId: action.otherItem.id\n        }\n        try {\n            const { data } = await removeMatch({ variables: { changeMatchInput: removeMatchInput }})\n            if (data?.removeMatch.success) return true\n            return false\n        } catch (error) {\n            console.log('error\\n', error)\n            setNotification({\n                title: 'ERROR',\n                content: 'Error in removing match',\n                themeType: 'error',\n                clearNotification: () =>  setNotification(undefined)\n            })\n            setSubmitting(false)\n            return false\n        }\n    }\n\n\n    return {\n        submitting,\n        submitAddMatch,\n        notification,\n        submitRemoveMatch\n    }\n\n}","import React, {  useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { CheckBox } from 'react-native-elements'\nimport { Button } from 'react-native-paper'\nimport { styles } from './styles'\nimport { theme } from '../../theme/theme'\n\n\n\ntype RemoveMatchPropsType = {\n    isSubmitting: boolean,\n    removeMatch: () => void\n}\n\n\nconst RemoveMatch: React.FC<RemoveMatchPropsType> = ({ isSubmitting, removeMatch }) => {\n\n    const [isConfirmed, setIsConfirmed] = useState(false) \n\n\n    return (\n        <View style={styles.removeWarningContainer}>\n        <Text style={styles.removeWarningText}>\n            If you withdraw your swap proposal,\n        </Text>\n        <Text style={styles.removeWarningText}>\n            the chat posts will also be permanently removed.\n        </Text>  \n        <CheckBox\n            center\n            title='I understand and want to continue.'\n            checked={isConfirmed}\n            onPress={() => setIsConfirmed(!isConfirmed)}\n            checkedColor={theme.colors.primary.main}\n            textStyle={{ fontWeight: 'normal', color: theme.colors.primary.main }}\n            containerStyle={{ backgroundColor: 'transparent', borderWidth: 0 }}\n        />\n        <View style={styles.removeAccountButtonView}>\n            <Button \n                icon='account-remove' \n                mode='contained' \n                compact={true}\n                onPress={removeMatch}\n                color={isConfirmed ? theme.colors.error : theme.colors.primary.light}\n                disabled={isSubmitting || !isConfirmed}\n            >\n                REMOVE MATCH\n            </Button>\n        </View>  \n    </View>\n    )\n}\n\n\nexport default RemoveMatch\n\n\n","import React from 'react'\nimport { View, Image } from 'react-native'\nimport { styles } from './styles'\nimport MIcon from 'react-native-vector-icons/MaterialCommunityIcons'\nimport { theme } from '../../theme/theme'\nimport { IconButton } from 'react-native-paper'\nimport { SelectedItemMatchType } from '../../types/match/SelectedItemMatchType'\n\n\n\ntype MatchedItemsImagesPropsType = {\n    selectedMatch: SelectedItemMatchType,\n    setShowRemoveWarning: (newState: boolean) => void\n}\n\n\n\nconst MatchedItemsImages: React.FC<MatchedItemsImagesPropsType> = ({ selectedMatch,  setShowRemoveWarning }) => {\n\n\n    return (\n                    <View style={styles.matchImageRowContainer}>\n                        <Image \n                            source={{uri: selectedMatch.otherItem.imageSecureUrl ?? ''}}\n                            style={styles.matchImage} \n                        />\n                        <View style={styles.matchImageCentralIconsContainer}>\n                            <MIcon name='cards-heart' size={50} color={theme.colors.primary.light} />\n                            <View style={styles.iconBackgroundCircle}>\n                                <IconButton\n                                    icon='delete-forever'\n                                    color={theme.colors.primary.dark}\n                                    size={40}\n                                    onPress={() => setShowRemoveWarning(true)}\n                                /> \n                            </View>\n                        </View>\n                        <Image \n                            source={{uri: selectedMatch.myItem.imageSecureUrl ?? '' }}\n                            style={styles.matchImage} \n                        /> \n                    </View>                    \n            \n    )\n}\n\n\nexport default MatchedItemsImages\n\n\n","import React from 'react'\nimport { View,  Text } from 'react-native'\nimport { styles } from './styles'\nimport { ChatPostType } from '../../types/chat/ChatPostType'\nimport { Avatar } from 'react-native-paper'\nimport { getDisplayDateTime } from './getDisplayDateTime'\n\n\n\n\ntype ChatPostPropsType = {\n    post: ChatPostType,\n    isMyItem: boolean,\n    imageUrl: string\n}\n\nconst ChatPost: React.FC<ChatPostPropsType> = ({ post, isMyItem, imageUrl }) => {\n    return (\n        <View style={styles.chatPostContainer}>\n            <View style={styles.avatarContainer}>\n                {!isMyItem && <Avatar.Image size={40} source={{uri: imageUrl}} />}\n            </View>\n            \n            <View style={styles.contentContainer}>\n                <Text style={styles.dateTimeText}>{getDisplayDateTime(post.createdAt)}</Text>\n                <Text>{post.post}</Text>\n            </View>\n            \n            <View  style={styles.avatarContainer}>\n                {isMyItem && <Avatar.Image size={40} source={{uri: imageUrl}} />}\n            </View>\n            \n        </View>\n    )\n}\n\n\nexport default ChatPost\n\n","export const getDisplayDateTime = (dateTime: string): string => {\n    const date = new Date(parseInt(dateTime))\n    const [month, day, year, hours, minutes] = [\n        date.getMonth(), date.getDate(), date.getFullYear(), date.getHours(), date.getMinutes(),\n    ]\n    const today = new Date()\n    const [todayMonth, todayDay, todayYear] = [today.getMonth(), today.getDate(), today.getFullYear()]\n    const isToday = month === todayMonth && day === todayDay && year === todayYear\n    const time = `${hours}.${minutes < 10 ? '0' + minutes : minutes}`\n    if (isToday) return `Today ${time}`\n    else return `${['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()]} ${day}.${month}.${year} ${hours}.${minutes} ${time}`\n}\n\n","import React from 'react'\nimport { View, ScrollView } from 'react-native'\nimport { styles } from './styles'\nimport ChatPost from './ChatPost'\nimport { ChatPostType } from '../../types/chat/ChatPostType'\nimport { SelectedItemMatchType } from '../../types/match/SelectedItemMatchType'\n\n\ntype ChatPostListPropsType = {\n    selectedMatch: SelectedItemMatchType,\n    posts: ChatPostType[]\n}\n\nconst ChatPostList: React.FC<ChatPostListPropsType> = ({ posts, selectedMatch }) => {\n\n\n    return (\n\n                <View style={styles.scrollView}>\n                    <ScrollView>\n                        <View style={styles.chatContainer}>\n                            {posts.map((post, index) => {\n                                const isMyItem = selectedMatch.myItem.id === post.postingItemId\n                                return <ChatPost \n                                            key={'post-' + index.toString()} \n                                            post={post} \n                                            isMyItem={isMyItem}\n                                            imageUrl={isMyItem? (selectedMatch.myItem.imageSecureUrl ?? '') : (selectedMatch.otherItem.imageSecureUrl ?? '')}\n                                        />\n                            })}\n                        </View>                    \n                    </ScrollView>\n                </View>\n    )\n}\n\n\nexport default ChatPostList\n\n\n\n\n\n","import React, {  useState } from 'react'\nimport { View } from 'react-native'\nimport { styles } from './styles'\nimport { IconButton } from 'react-native-paper'\nimport FormTextInput from '../common-components/form-text-input/FormTextInput'\nimport { useHandleChat } from './useHandleChat'\nimport { SelectedItemMatchType } from '../../types/match/SelectedItemMatchType'\nimport { ApolloQueryResult } from '@apollo/client'\nimport { ItemsChatResponseType } from './queries'\nimport Notification from '../common-components/notification/Notification'\n\n\ntype NewChatPostPropsType = {\n    selectedMatch: SelectedItemMatchType,\n    refetchPosts: (variables?: Partial<{\n        itemsChatInput: {\n            itemIdA: string;\n            itemIdB: string;\n        };\n    }> | undefined) => Promise<ApolloQueryResult<ItemsChatResponseType>>\n}\n\n\n\nconst NewChatPost: React.FC<NewChatPostPropsType> = ({ selectedMatch, refetchPosts }) => {\n\n\n    const [newPost, setNewPost] = useState('')\n    const [showErrors, setShowErrors] = useState(false)\n    const { submittingPost, postNotification, submitPost } = useHandleChat()\n   \n\n    const submitNewPost = async () => {\n        setShowErrors(true)\n        const successInSubmittingPost = await submitPost(selectedMatch.myItem.id, selectedMatch.otherItem.id, newPost)\n        if (successInSubmittingPost) {\n            refetchPosts()\n            setNewPost('')\n            setShowErrors(false)\n        }\n    }\n\n\n    return (\n\n            <View style={styles.newPostContainer}>\n\n                {postNotification !== undefined &&\n                    <Notification  { ...postNotification }/>\n                }\n\n                <FormTextInput\n                    target='matchPost'\n                    value={newPost}\n                    handleValueChange={text => setNewPost(text)}\n                    isEditable={true}\n                    isVisible={true}\n                    error={showErrors && newPost.length < 1 ? 'RED_TITLE' : undefined}\n                />\n                <View style={styles.postIconBackgroundCircle}>\n                    <IconButton\n                        icon='send'\n                        color='#FFFFFF'\n                        size={30}\n                        onPress={submitNewPost}\n                        disabled={submittingPost}\n                    /> \n                </View>\n            </View>\n\n    )\n}\n\n\nexport default NewChatPost\n\n\n","import { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { NotificationPropsType } from 'src/types/notification/NotificationPropsType'\nimport { ADD_POST, AddPostInputVariablesType, AddPostResponseType } from './queries'\n\n\n\n\n\ntype UseHandleChatType = {\n    submittingPost: boolean,\n    postNotification: NotificationPropsType | undefined,\n    submitPost: (itemIdA: string, itemIdB: string, post: string) => Promise<boolean>,\n}\n\n\n\nexport const useHandleChat = (): UseHandleChatType => {\n\n\n    const [submittingPost, setSubmittingPost] = useState(false)\n    const [postNotification, setPostNotification] = useState<NotificationPropsType | undefined>(undefined)\n    const [addPost] = useMutation<AddPostResponseType, { addPostInput: AddPostInputVariablesType }>(ADD_POST)\n\n\n    const submitPost = async (itemIdA: string, itemIdB: string, post: string): Promise<boolean> => {\n        setSubmittingPost(true)\n        const addPostInput = {\n            itemIdA: itemIdA, \n            itemIdB: itemIdB, \n            post: post\n        }\n        try {\n            const { data } = await addPost({ variables: { addPostInput: addPostInput }})\n            if (data && data.addPost && data.addPost.success) {\n                setSubmittingPost(false)\n                return true\n            }\n            return false\n        } catch (error) {\n            console.log('error\\n', error)\n            setPostNotification({\n                title: 'ERROR',\n                content: 'Error in adding post',\n                themeType: 'error',\n                clearNotification: () =>  setPostNotification(undefined)\n            })\n            setSubmittingPost(false)\n            return false\n        }\n    }\n\n\n\n\n    return {\n        submittingPost,\n        postNotification,\n        submitPost\n    }\n\n}","import React, {  useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { useReactiveVar } from '@apollo/client'\nimport { selectedMatchVar } from '../../apollo/cache'\nimport { styles } from './styles'\nimport { ITEMS_CHAT, ItemsChatResponseType } from './queries'\nimport { useQuery } from '@apollo/client'\nimport Notification from '../common-components/notification/Notification'\nimport WaitSpinner from '../common-components/wait-spinner/WaitSpinner'\nimport { ChatPostType } from '../../types/chat/ChatPostType'\nimport { useHandleMatch } from './useHandleMatch'\nimport RemoveMatch from './RemoveMatch'\nimport MatchedItemsImages from './MatchedItemsImages'\nimport ChatPostList from './ChatPostList'\nimport NewChatPost from './NewChatPost'\nimport { useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropHomeType } from '../../types/routes/CompositeNavigationPropTypes'\n\n\nconst ManageMatch = () => {\n\n    const selectedMatch = useReactiveVar(selectedMatchVar)\n    const [showRemoveWarning, setShowRemoveWarning] = useState(false)\n    const { submitting, notification, submitRemoveMatch } = useHandleMatch()\n    const navigation = useNavigation<CompositeNavigationPropHomeType>()\n\n    const { loading, error, data, refetch } = useQuery<\n            ItemsChatResponseType, \n            { itemsChatInput: { itemIdA: string, itemIdB: string }}\n        >(ITEMS_CHAT, \n            { \n                variables: { itemsChatInput: { itemIdA: selectedMatch?.myItem.id ?? '', itemIdB: selectedMatch?.otherItem.id ?? '' } },\n                pollInterval: 3000,\n            }\n        )\n\n\n    if (!selectedMatch) return null\n\n    const removeMatch = async () => {\n        const successInRemoveMatch = await submitRemoveMatch({\n            mode: 'MY',\n            currentState: 'BOTH',\n            myItem: { id: selectedMatch.myItem.id, title: selectedMatch.myItem.title, imageSecureUrl: selectedMatch.myItem.imageSecureUrl ?? '' },\n            otherItem: { id: selectedMatch.otherItem.id, title: selectedMatch.otherItem.title, imageSecureUrl: selectedMatch.otherItem.imageSecureUrl ?? '' },\n        })\n        if (successInRemoveMatch) {\n            navigation.navigate('Home')\n        }\n    }\n\n\n    const posts: ChatPostType[] = data && data.itemsChat && data.itemsChat.posts && data.itemsChat.posts.length > 0 ?\n        data.itemsChat.posts : []\n\n\n    return (\n        <View style={styles.manageMatchPageContainer}>\n            <Text style={styles.pageTitle}>MANAGE MATCH</Text>\n\n            {notification !== undefined &&\n                <Notification  { ...notification }/>\n            }\n\n            {showRemoveWarning ?\n                    <RemoveMatch removeMatch={removeMatch} isSubmitting={submitting}/>\n                    :\n                    <MatchedItemsImages \n                        selectedMatch={selectedMatch}\n                        setShowRemoveWarning={setShowRemoveWarning}\n                    />                   \n            }\n       \n\n            <View>\n                {loading ?\n                    <WaitSpinner/>\n                    : error ?\n                        <Text>Something went wrong. Could not find chat.</Text>\n                        :\n                        null\n                }\n            </View>\n\n            {posts.length > 0 &&\n                <ChatPostList\n                    selectedMatch={selectedMatch}\n                    posts={posts}\n                />\n            }\n\n            <NewChatPost\n                selectedMatch={selectedMatch}\n                refetchPosts={refetch}\n            />\n\n        </View>\n    )\n}\n\n\nexport default ManageMatch\n\n\n","import React, { useState } from 'react'\nimport { View, Image } from 'react-native'\nimport { styles } from './styles'\nimport { theme } from '../../theme/theme'\nimport { Button } from 'react-native-paper'\nimport { matchToHandleVar, selectedMatchVar } from '../../apollo/cache'\nimport { useHandleMatch } from './useHandleMatch'\nimport {  useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropBrowseType, CompositeNavigationPropHomeType } from '../../types/routes/CompositeNavigationPropTypes'\nimport { ItemImageButtonActionType } from '../common-components/handle-matches/ItemImageButtonsRow'\nimport RemoveMatch from './RemoveMatch'\nimport Notification from '../common-components/notification/Notification'\n\n\n\n\ntype ManageMatchActionPropsType = {\n    action: ItemImageButtonActionType,\n}\n\n\nconst ManageMatchAction: React.FC<ManageMatchActionPropsType> = ({ action }) => {\n\n    const [showRemoveWarning, setShowRemoveWarning] = useState(false)\n    const { submitting, submitAddMatch, notification, submitRemoveMatch } = useHandleMatch()\n    const navigation = useNavigation<CompositeNavigationPropBrowseType | CompositeNavigationPropHomeType>()\n\n    const act = async () => {\n        if (action.currentState === 'FROM' || action.currentState === 'AVAILABLE') {\n            const successInMatching = await submitAddMatch(action)\n            if (action.currentState === 'FROM' && successInMatching) {\n                viewMatch()\n            } else {\n                cancelHandleMatch()\n            }\n        }\n        if (action.currentState === 'TO' || action.currentState === 'BOTH') {\n            const successInRemovingMatch = await submitRemoveMatch(action)\n            if (successInRemovingMatch) {\n                cancelHandleMatch()\n            }\n        }        \n    }\n\n    const cancelHandleMatch = () => {\n        matchToHandleVar(undefined)\n        if (action.mode === 'MY') {\n            navigation.navigate('Home') \n        } else {     \n            navigation.navigate('Browse')            \n        }\n\n    }\n\n    const viewMatch = () => {\n        matchToHandleVar(undefined)\n        selectedMatchVar({\n            myItem: action.myItem,\n            otherItem: action.otherItem,\n        })  \n    }\n\n    const buttonLabels = {\n        TO: 'WITHDRAW SWAP PROPOSITION',\n        FROM: 'CONFIRM SWAP',\n        BOTH: 'WITHDRAW SWAP PROPOSITION',\n        AVAILABLE: 'PROPOSE SWAP',\n    }\n\n\n    return (\n        <View>\n            {notification !== undefined &&\n                <Notification  { ...notification }/>\n            }\n\n            <View style={styles.imageRowContainer}>\n                <Image \n                    source={{uri: action.otherItem.imageSecureUrl}}\n                    style={styles.image} \n                />\n                <Image \n                    source={{uri: action.myItem.imageSecureUrl}}\n                    style={styles.image} \n                />                \n            </View>\n\n            {action.currentState === 'BOTH' ?\n                <View>\n                    {showRemoveWarning ?\n                        <RemoveMatch removeMatch={act} isSubmitting={submitting}/>\n                        :\n                        <View style={styles.matchButtonView}>\n                            <Button \n                                mode='contained' \n                                onPress={() => setShowRemoveWarning(true)}\n                                disabled={false}\n                                color={theme.colors.primary.main}\n                            >\n                                {buttonLabels.BOTH}\n                            </Button>\n                        </View>\n                    }\n                </View>\n                :\n                <View style={styles.matchButtonView}>\n                    <Button \n                        mode='contained' \n                        onPress={act}\n                        disabled={false}\n                        color={action.currentState === 'TO' ? theme.colors.error : theme.colors.primary.main}\n                    >\n                        {buttonLabels[action.currentState]}\n                    </Button>\n                </View>                \n            }\n\n\n\n            {action.currentState === 'BOTH' &&\n                            <View style={styles.matchButtonView}>\n                            <Button \n                                mode='contained' \n                                onPress={viewMatch}\n                                disabled={false}\n                                color={theme.colors.primary.main}\n                            >\n                                VIEW MATCH\n                            </Button>\n                        </View>\n            }\n\n            <View style={styles.matchButtonView}>\n                <Button \n                    icon='keyboard-return' \n                    mode='contained' \n                    onPress={cancelHandleMatch}\n                    disabled={false}\n                    color={theme.colors.primary.main}\n                >\n                    BACK\n                </Button>\n            </View>\n        </View>\n    )\n}\n\nexport default ManageMatchAction\n\n","import { StyleSheet, Dimensions } from 'react-native'\nimport { theme } from '../../../theme/theme'\n\n\nexport const styles = StyleSheet.create({\n\n    pageTitle: {\n        marginTop: 60,\n        marginBottom: 10,\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    image: {\n        width: 150,\n        height: 150,\n        marginBottom: 5,\n        // marginTop: 5,\n        borderRadius: 8,\n        // backgroundColor: 'orange'\n    },\n    matchImage: {\n        width: 120,\n        height: 120,\n        margin: 10,\n        borderRadius: 8,\n        // backgroundColor: 'orange'\n    },\n    imageRowContainer: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    myItemImage: {\n        width: 80,\n        height: 80,\n        marginLeft: 3,\n        marginRight: 3,\n        borderRadius: 3,\n        backgroundColor: 'orange'\n    },\n\n    itemTitle: {\n        // marginTop: 20,\n        // marginBottom: 10,\n        fontSize: 20,\n        fontWeight: 'bold',\n        textAlign: 'center'\n    },\n    matchButtonView: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 20,\n        marginBottom: 20,\n    },\n\n    pageContentContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        \n    },\n    itemImageButton: {\n        backgroundColor: theme.colors.primary.dark,\n    },\n    iconContainer: {\n        backgroundColor: theme.colors.primary.dark,\n        borderRadius: 3\n    },\n    matchImageRowContainer: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: theme.colors.primary.dark,\n        borderRadius: 6,\n        marginBottom: 10,\n    },\n    matchImageCentralIconsContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 8,\n        marginRight: 8,\n    },\n    iconBackgroundCircle: {\n        backgroundColor: theme.colors.primary.light,\n        width: 50,\n        height: 50,\n        borderRadius: 50,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 10,\n    },\n    newPostContainer: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        // marginLeft: 8,\n        // marginRight: 8,\n        width: '100%',\n        // backgroundColor: 'orange',\n    },\n    postIconBackgroundCircle: {\n        backgroundColor: theme.colors.primary.light,\n        width: 45,\n        height: 45,\n        borderRadius: 45,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginLeft: 10,\n        marginTop: 5,\n    },\n    manageMatchPageContainer: {\n        flexDirection: 'column',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        // backgroundColor: 'orange',\n        width: Dimensions.get('window').width,\n\n    },\n    chatContainer: {\n        // backgroundColor: 'rosybrown',\n        height: Dimensions.get('window').height * 0.45,\n        width: Dimensions.get('window').width,\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        // marginTop: 10\n    },\n    chatPostContainer: {\n        width: Dimensions.get('window').width * 0.9,\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        marginBottom: 10,\n        // backgroundColor: theme.colors.primary.veryLight,\n        borderRadius: 6,\n    },\n    dateTimeText: {\n        fontStyle: 'italic',\n        fontSize: 12,\n        color: theme.colors.primary.light\n    },\n    contentContainer: {\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        // backgroundColor: 'powderblue',\n        width: Dimensions.get('window').width * 0.9 - 2 * 35,\n    },\n    avatarContainer: {\n        width: 35,\n        height: 35,\n        // backgroundColor: 'powderblue',\n    },\n    scrollView: {\n        flex: 1,\n        flexGrow: 1,\n    }\n})\n","import React from 'react'\nimport { View, Text, Image, TouchableOpacity } from 'react-native'\nimport { styles } from './styles'\n\n\n\n\n\nexport type ItemImageButtonActionType = {\n    mode: 'MY' | 'BROWSE',\n    currentState: 'BOTH' | 'TO' | 'FROM' | 'AVAILABLE'\n    myItem: {\n        id: string, title: string, imageSecureUrl: string\n    },\n    otherItem: {\n        id: string, title: string, imageSecureUrl: string\n    }\n}\n\n\n\ntype ItemImageButtonsRowPropsType = {\n    mode: 'MY' | 'BROWSE',\n    type: 'BOTH' | 'TO' | 'FROM' | 'AVAILABLE'\n    itemsForButtons: {\n        id: string,\n        title: string,\n        imageSecureUrl: string,\n    }[],\n    setAction: (action: ItemImageButtonActionType) => void,\n    mainItem: { id: string, title: string, imageSecureUrl: string },\n}        \n\n\nconst titles = {\n    BOTH: <Text>already <strong>MATCHED</strong> with:</Text>,\n    TO: <Text>you have <strong>PROPOSED</strong> to swap with:</Text>,\n    FROM: <Text>you have been <strong>ASKED</strong> to swap with:</Text>,\n    AVAILABLE: <Text>you could <strong>PROPOSE</strong> to swap with:</Text>,\n}\n\n\n\nconst ItemImageButtonsRow: React.FC<ItemImageButtonsRowPropsType> = ({ mode, type, itemsForButtons, setAction, mainItem }) => {\n\n    if (itemsForButtons.length === 0) return null\n    if (mode === 'MY' && type === 'AVAILABLE') throw new Error('Type \"AVAILABLE\" is not available for mode \"MY\".')\n    \n    return (\n        <View>\n            {titles[type]}\n            <View style={styles.imageRowContainer}>\n                {itemsForButtons.map(item => {\n\n                    if (item.imageSecureUrl) {\n                        const action = {\n                            mode: mode,\n                            currentState: type,\n                            myItem: mode === 'MY' ? mainItem : item,\n                            otherItem: mode === 'MY' ? item : mainItem\n                        }\n\n                        return (\n                            <TouchableOpacity onPress={() => setAction(action)} key={item.id + '-' + type}>\n                                <Image\n                                        source={{ uri: item.imageSecureUrl }}\n                                        style={styles.myItemImage}\n                                    /> \n                                </TouchableOpacity>\n                        )\n                    } \n                    return null\n                })}\n            </View>\n        </View>\n    )\n}\n\nexport default ItemImageButtonsRow\n\n","import React from 'react'\nimport { View, Text, Image } from 'react-native'\nimport { styles } from './styles'\nimport { Button } from 'react-native-paper'\nimport { theme } from '../../theme/theme'\nimport { matchToHandleVar } from '../../apollo/cache'\nimport {  useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropHomeType, CompositeNavigationPropBrowseType } from '../../types/routes/CompositeNavigationPropTypes'\nimport { ItemImageButtonActionType } from '../common-components/handle-matches/ItemImageButtonsRow'\n// import { MyItemToHandleType } from '../../types/match/MyItemToHandleType'\nimport ItemImageButtonsRow from '../common-components/handle-matches/ItemImageButtonsRow'\nimport { MatchToHandleType } from '../../types/match/MatchToHandleType'\nimport { MyItemsInCacheForMatchingType } from './Match'\nimport { MatchItemDataType } from '../../types/match/MatchToHandleType'\n\n\nconst myItemsAvailableToMatch = (myItemsInCache: MyItemsInCacheForMatchingType[], mathes: MatchItemDataType[], matchedFrom: MatchItemDataType[], matchedTo: MatchItemDataType[]) => {\n    let itemsAvailable: MyItemsInCacheForMatchingType[] = []\n\n    myItemsInCache.forEach(itemInCache => {\n        if (mathes.every(bothWaysItem => bothWaysItem.id !== itemInCache.id)\n        && matchedFrom.every(fromItem => fromItem.id !== itemInCache.id)\n        && matchedTo.every(toItem => toItem.id !== itemInCache.id)) {\n            itemsAvailable.push(itemInCache)\n        }\n    })\n    \n    return itemsAvailable\n}\n\n\ntype MatchesPagePropsType = {\n    matchToHandle: MatchToHandleType,\n    setAction: (action: ItemImageButtonActionType) => void,\n    myItemsInCache: MyItemsInCacheForMatchingType[],\n}\n\n\n\nconst MatchesPage: React.FC<MatchesPagePropsType> = ({ matchToHandle, setAction, myItemsInCache }) => {\n\n\n    const { mode, item, matches, matchedFrom, matchedTo } = matchToHandle\n    const navigation = useNavigation<CompositeNavigationPropHomeType | CompositeNavigationPropBrowseType>()\n\n    const myItemsStillAvailable = myItemsAvailableToMatch(myItemsInCache, matches, matchedFrom, matchedTo)\n\n    const cancelHandleMatch = () => {\n        matchToHandleVar(undefined)\n        if (mode === 'MY') navigation.navigate('Home')\n        else navigation.navigate('Browse')\n    }\n\n\n    return (\n        <>\n            <Text style={styles.itemTitle}>{item.title.toLocaleUpperCase()}</Text>\n            <Image \n                source={{uri: item.imageSecureUrl}}\n                style={styles.image} \n            /> \n\n            <ItemImageButtonsRow\n                mode={matchToHandle.mode}\n                type='BOTH'\n                itemsForButtons={matches}\n                mainItem={item}\n                setAction={setAction}\n            />\n            <ItemImageButtonsRow\n                mode={matchToHandle.mode}\n                type='TO'\n                mainItem={item}\n                itemsForButtons={matchedTo}\n                setAction={setAction}\n            />            \n            <ItemImageButtonsRow\n                mode={matchToHandle.mode}\n                type='FROM'\n                mainItem={item}\n                itemsForButtons={matchedFrom}\n                setAction={setAction}\n            /> \n            {mode === 'BROWSE' &&\n                <ItemImageButtonsRow\n                    mode={matchToHandle.mode}\n                    type='AVAILABLE'\n                    mainItem={item}\n                    itemsForButtons={myItemsStillAvailable}\n                    setAction={setAction}\n                />  \n            }           \n\n            <View style={styles.matchButtonView}>\n                <Button \n                    icon='keyboard-return' \n                    mode='contained' \n                    onPress={cancelHandleMatch}\n                    disabled={false}\n                    color={theme.colors.primary.main}\n                >\n                    BACK\n                </Button>\n            </View>\n        </>\n    )\n}\n\nexport default MatchesPage\n\n\n","import React, { useState } from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { MatchToHandleType } from '../../types/match/MatchToHandleType'\nimport { MyItemsInCacheForMatchingType } from './Match'\nimport ManageAction from './ManageAction'\nimport { ItemImageButtonActionType } from '../common-components/handle-matches/ItemImageButtonsRow'\nimport MatchesPage from './MatchesPage'\n\n\ntype HandleMatchPropsType = {\n    matchToHandle: MatchToHandleType,\n    myItemsInCache: MyItemsInCacheForMatchingType[],\n}\n\n\n\n\n\nconst HandleMatch: React.FC<HandleMatchPropsType> = ({ matchToHandle, myItemsInCache }) => {\n\n    const [action, setAction] = useState<ItemImageButtonActionType | undefined>(undefined)\n    \n\n    return (\n        <View style={styles.pageContentContainer}>\n            <Text style={styles.pageTitle}>HANDLE SWAP PROPOSALS</Text>\n            {action ?\n                <ManageAction action={action}/>\n                :\n                <MatchesPage\n                    matchToHandle={matchToHandle}\n                    myItemsInCache={myItemsInCache}\n                    setAction={setAction}\n                />\n            }\n        </View>\n    )\n}\n\nexport default HandleMatch\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\nimport { styles } from './styles'\nimport { useReactiveVar, useApolloClient } from '@apollo/client'\nimport { matchToHandleVar, selectedMatchVar } from '../../apollo/cache'\nimport { MY_ITEMS_IN_CACHE } from './queries'\nimport { PriceGroupEnum } from '../../types/item/PriceGroupEnum'\nimport ManageMatch from './ManageMatch'\nimport HandleMatch from './HandleMatch'\nimport { useNavigation } from '@react-navigation/native'\nimport { CompositeNavigationPropHomeType, CompositeNavigationPropBrowseType } from '../../types/routes/CompositeNavigationPropTypes'\nimport MoveToPage from '../common-components/move-to-page/MoveToPage'\n\n\n\n\nexport type MyItemsInCacheForMatchingType = {\n    id: string,\n    title: string,\n    priceGroup: PriceGroupEnum, \n    imageSecureUrl: string\n}\n\n\nconst Match = () => {\n\n    const matchToHandle = useReactiveVar(matchToHandleVar)\n    const selectedMatch = useReactiveVar(selectedMatchVar)\n    const navigation = useNavigation<CompositeNavigationPropHomeType | CompositeNavigationPropBrowseType>()\n\n    const client = useApolloClient()\n    const myItemsInCache: { myItems: MyItemsInCacheForMatchingType[] } | null | undefined = client.readQuery({\n        query: MY_ITEMS_IN_CACHE\n    })\n\n    if (selectedMatch !== undefined) {\n        return <ManageMatch/>\n    }    \n\n    if (matchToHandle !== undefined) {\n        return <HandleMatch matchToHandle={matchToHandle} myItemsInCache={myItemsInCache ? myItemsInCache.myItems : []}/>\n    }\n\n\n\n    return (\n        <View style={styles.pageContentContainer}>\n            <Text style={styles.pageTitle}>MATCH</Text>\n            <Text>\n                An item needs to be selected to view its' matching status.\n            </Text>\n\n            <MoveToPage\n                infoText='Either select one of your own items:'\n                underlinedText='MY ITEMS'\n                moveAction={() => navigation.navigate('Home') }\n            />\n            <MoveToPage\n                infoText='Or browse items by other people:'\n                underlinedText='BROWSE ITEMS'\n                moveAction={() => navigation.navigate('Browse') }\n            />\n        </View>\n    )\n}\n\nexport default Match\n\n\n\n\n","export const assertNever = (value: unknown): never => {\n    throw new Error(`Unhandled value in switch, value:${JSON.stringify(value)}`)\n}","import React from 'react'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport { enableScreens } from 'react-native-screens'\nimport Home from '../home/Home'\nimport Browse from '../browse/Browse'\nimport Settings from '../settings/Settings'\nimport Add from '../add/Add'\nimport Match from '../match/Match'\nimport { theme } from '../../theme/theme'\nimport { RoutesEnum } from '../../types/routes/RoutesEnum'\nimport { getTabBarIcon } from './getTabBarIcon'\nimport { ScreensWithVisibleTabBarStackType } from '../../types/routes/ScreensWithVisibleTabBarStackType'\n\n\nenableScreens()\n\nconst TABBAR_HEIGHT = 50\n\n\n\nconst ScreensWithVisibleTabBar = () => {\n\n    const Tab = createBottomTabNavigator<ScreensWithVisibleTabBarStackType>()\n\n    return (\n        <Tab.Navigator\n            screenOptions={({ route }) => ({\n                tabBarIcon: ({ color, size }) => getTabBarIcon(route, size, color),\n                tabBarTestID: `TabBar-${route.name}`,\n            })}\n            tabBarOptions={{\n                activeTintColor: theme.colors.primary.dark,\n                inactiveTintColor: theme.colors.primary.light,\n                style: { height: TABBAR_HEIGHT },\n                \n            }\n        }\n        >\n            <Tab.Screen name={RoutesEnum.HOME} component={Home} />\n            <Tab.Screen name={RoutesEnum.ADD} component={Add} />\n            <Tab.Screen name={RoutesEnum.BROWSE} component={Browse} />\n            <Tab.Screen name={RoutesEnum.MATCH} component={Match} />\n            <Tab.Screen name={RoutesEnum.SETTINGS} component={Settings} />\n    </Tab.Navigator>\n    )\n}\n\n\nexport default ScreensWithVisibleTabBar\n\n\n\n","import { RouteProp } from \"@react-navigation/native\"\nimport React from \"react\"\nimport { RoutesEnum } from \"../../types/routes/RoutesEnum\"\nimport { assertNever } from \"../../utils/common-functions/assertNever\"\nimport Ionicons from 'react-native-vector-icons/Ionicons'\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons'\n\n\n\n\nexport const getTabBarIcon = (route: RouteProp<Record<string, object | undefined>, string>, size: number, color: string) => {\n        switch (route.name) {\n            case RoutesEnum.HOME:\n                return <Ionicons name='home' size={size} color={color} />\n            case RoutesEnum.BROWSE:\n                return <MaterialIcons  name='view-carousel' size={size} color={color}/>                            \n            case RoutesEnum.ADD:\n                return <MaterialIcons  name='library-add' size={size} color={color}/>\n            case RoutesEnum.SETTINGS:\n                return <Ionicons  name='settings-sharp' size={size} color={color}/>\n            case RoutesEnum.IMAGING:\n                return <Ionicons  name='settings-sharp' size={size} color={color}/>\n            case RoutesEnum.MATCH:\n                return <Ionicons  name='chatbox-ellipses' size={size} color={color}/>\n            default:\n                return assertNever(route)\n        }\n    }\n\n    ","import React, { useContext } from 'react'\nimport AppContext from '../../app-state/AppContext'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { enableScreens } from 'react-native-screens'\nimport SignUpLogin from '../login/SignUpLogin'\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client'\nimport { setContext } from '@apollo/client/link/context'\nimport { LOCALHOST_GRAPHQL } from '@env'\nimport ImagingScreen from '../camera/ImagingScreen'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport ScreensWithVisibleTabBar from './ScreensWithVisibleTabBar'\nimport { RootStackType } from '../../types/routes/RootStackType'\nimport { itemUnderConstructionImageVar, matchToHandleVar } from '../../apollo/cache'\nimport { BrowseItemsByPageType } from '../../types/browse/BrowseItemsByPageType'\n\n\n\n\nenableScreens()\n\n// We need to store logged in user data.\n// React Native local storage is not properly supported.\n// Therefore, some other way needs to be used to store the logged in user data.\n// For this, React Context was chosen.\n// However, when Context state changes and a new Apollo Client is created\n// as guided by Apollo Documents (via httpLink), the Apollo CACHE stops working.\n// For this reason here the login and signup are performed using axios,\n// and only after logged in user is known, an Apollo Client is created\n// to be used with authorization for the rest of the app!\n\n\n\n\n\n\nconst MainApp = () => {\n\n    const { state } = useContext(AppContext)\n    const loggedInUser = state.loggedInUser\n\n    if (!loggedInUser) {\n        return (\n            <SignUpLogin/>\n        )\n    }\n\n\n    // Only after we have a logged in user, the Apollo Client is created \n    // with possibility to authorize the queries.\n\n\n    const httpLink = createHttpLink({\n        uri: LOCALHOST_GRAPHQL,\n    })\n\n    const authorizationLink = setContext((_, { headers}) => {\n        const token = loggedInUser.jwtToken\n            return {\n                headers: {\n                    ...headers,\n                    authorization: token ?? ''\n                }\n            }\n    })\n\n    const client = new ApolloClient({\n        link: authorizationLink.concat(httpLink),\n        connectToDevTools: true,\n        cache: new InMemoryCache({\n            typePolicies: {\n                Query: {\n                    fields: {\n                        itemUnderConstruction: {\n                            read() {\n                                return itemUnderConstructionImageVar()\n                            }\n                        },\n                        matchToHandle: {\n                            read() {\n                                return matchToHandleVar()\n                            }\n                        },\n                        browseItemsByPage: {\n                            keyArgs: false,\n                            merge(existing = {}, incoming: BrowseItemsByPageType) {\n                                if (!existing || !existing.pageInfo) return incoming\n                                const existingBrowseItemsByPage = existing as BrowseItemsByPageType\n                                const updatedEgdes = [...existingBrowseItemsByPage.edges, ...incoming.edges]\n                                return {\n                                        edges: updatedEgdes,\n                                        pageInfo: { ...incoming.pageInfo }\n                                    }\n                            }\n                        }\n                    }\n                }\n            },\n        })\n    })\n\n    const Stack = createStackNavigator<RootStackType>()\n\n    return (\n\n        <ApolloProvider client={client}>\n            <NavigationContainer>\n                <Stack.Navigator\n                    screenOptions={{ header: () => null }}\n                >\n                    <Stack.Screen name={'ScreensWithVisibleTabBar'} component={ScreensWithVisibleTabBar}/>\n                    <Stack.Screen name={'Imaging'} component={ImagingScreen}/>\n                </Stack.Navigator>\n            </NavigationContainer>        \n        </ApolloProvider>      \n    )\n}\n\n\n\nexport default MainApp\n\n\n\n","import { ActionType } from '../types/app-state/ActionType'\nimport { ActionTypesEnum } from '../types/app-state/ActionTypesEnum'\nimport { AppStateType } from '../types/app-state/AppStateType'\nimport { assertNever } from '../utils/common-functions/assertNever'\n\n\n\nexport const reducer = (_state: AppStateType, action: ActionType): AppStateType => {\n\n    switch (action.type) {\n    case ActionTypesEnum.SET_LOGGED_IN_USER:\n        return { loggedInUser: action.data }\n    default:\n        return assertNever(action)\n    }\n\n}","import React, { useReducer } from 'react'\nimport { reducer } from './reducer'\nimport { initialState } from './initialState'\nimport AppContext from './AppContext'\n\n\nconst AppContextWithState: React.FC = ({ children }) => {\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return (\n        <AppContext.Provider value={{ state, dispatch }}>\n            {children}\n        </AppContext.Provider>\n    )\n\n}\n\nexport default AppContextWithState\n\n","import React from 'react'\nimport MainApp from './src/components/main-app/MainApp'\nimport AppContextWithState from './src/app-state/AppContextWithState'\nimport { Provider as PaperProvider } from 'react-native-paper'\nimport 'react-native-gesture-handler'\n\n\n\nconst App = () => {\n\n    console.log('HUHUU FROM SWAPLINGS')\n\n    return (\n        <PaperProvider>\n            <AppContextWithState>\n                <MainApp/>\n            </AppContextWithState>\n        </PaperProvider>\n    )\n}\n\nexport default App\n\n","module.exports = __webpack_public_path__ + \"static/media/LOGO.89bd4d4b.png\";"],"sourceRoot":""}